<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F10%2F14%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux]]></title>
    <url>%2F2015%2F10%2F15%2FLinux%2F</url>
    <content type="text"><![CDATA[tldr npm install -g tldr 相当于 man bat --language 高亮的cat cnetos 7 安装gcc6+12345sudo yum install centos-release-sclsudo yum install devtoolset-7-gcc-c++echo 'source /opt/rh/devtoolset-7/enable' &gt;&gt; ~/.bashrcwhich gccgcc --version 添加SHELL的TAB补全 12345678Debian/Ubuntu$ apt-get install bash-completionCentos$ yum install bash-completionMAC$ brew install bash-completion centos7安装alien 转换.deb —&gt;.rpm yum install alien alien -r xxx.deb // 将.deb文件转换为 .rpm yum -y localinstall xxx.rpm // 安装的同时解决依赖问题 ldd 程序名称 ==查看程序的运行依赖== sshpass 非交互式密码管理 sshpass下载地址 下载为一个 tar.gz的压缩包。 tar -zxvf sshpass-1.05.tar.gz cd sshpass-1.05 ./configure --prefix=/opt/sshpass #指定安装目录 make make install cp /opt/sshpass/bin/sshpass /usr/bin/# 或者把sshpass加入环境变量 在iterm2 中加入profile设置 在send Text at start中加入 sshpass -p 123456 ssh root@192.168.112.66 ctrl + w ==删除命令行左侧的一个单词== yum install yum remove ==卸载指定软件== yum search ==搜索相关的安装包== rpm -Uvh ==更新rpm程序== mv -t 目标地址路径 原文件地址 移动文件到目标路径 cmd + q 退出当前窗口 history | grep xxx 查看相关命令历史 history -c 清除Linux历史命令 123456789101112131415pv (pipe-view) 查看命令执行的进度1. 监视打开/拷贝文件进度pv /media/himanshu/1AC2-A8E3/fNf.mkv &gt; ./Desktop/fnf.mkv-p 显示进度-t 显示时间-n 显示整数百分比-r 速率-e 估计剩余的时间-L 修改传输速率 pv -L 2m /media/himanshu/1AC2-A8E3/fNf.mkv &gt; ./Desktop/fnf.mkv2. 监视压缩文件进度pv /media/himanshu/1AC2-A8E3/fnf.mkv | gzip &gt; ./Desktop/fnf.log.gz3. 监视数据内容搜索进度 pv -L 5k pvtest.dat | wc ln 源文件 软连接名称 set nu! vim中显示行号 远程登录服务器： ssh root@192.168.112.66 123456// 命令行ctrl+k:清除光标后至行尾的内容ctrl+u: 清除光标前至行首间的所有内容ctrl+a:光标移到行首ctrl+e:光标移到行尾。cmd + k 保留光标所在行，其余删除 cd - 返回上次访问的目录 df 可以获取硬盘被占用了多少空间，目前还剩下多少空间等信息 查看磁盘空间 df -h 查看目录大小 du -shdu 查看指定文件，文件夹所占用的磁盘空间 fdisk 分区 123456lsof命令可以列出当前的所有网络情况， 此命令的解释如下： -n 表示主机以ip地址显示 -P 表示端口以数字形式显示，默认为端口名称 -i 意义较多，具体 man lsof, 主要是用来过滤lsof的输出结果 -s 和 -i 配合使用，用于过滤输出lsof | grep port :查看占用端口的程序lsof -i:80 查看占用80端口的进程 123456789101112131415161718192021pkill 进程名killall 进程名称查看实时资源占用：top M(内存倒序) P(CPU倒序)查看连接某服务端口最多的的IP地址 netstat -ntu | grep :80 | awk '&#123;print $5&#125;' | cut -d: -f1 | awk '&#123;++ip[$1]&#125; END &#123;for(i in ip) print ip[i],"\t",i&#125;' | sort -nrnetstat s |egrep "listen" :查看tcp全连接队列的溢出情况溢出后，系统如何处理：cat /proc/sys/net/ipv4/tcp_abort_on_overflowtcp_abort_on_overflow 为0表示如果三次握手第三步的时候全连接队列满了那么server扔掉client发过来的ack(在server端认为链接还没有建立起来)为1 表示第三步的时候如果全接队列满了，server发送一个reset包给client，表示废弃这个握手过程ss 显示处于活动状态的套接字信息ss -lnt : l(listen) n(不解析服务器名称) t(tcp)[MaX4[MaX4[MaX4[MaX4[MaX4[MaX4netstat -antp | grep 端口号(此端口号运行的进程)+ 进程名称(此进程占用的端口号)[MaX4ps aux/-ef |grep xxx 查看进程占用的端口号[MaX4[MaX4ps aux | grep xxx | grep -v grep | xargs（将输入转化为后面命令的参数） kill -9 === kill -9 ` ps -aux |grep xxx |grep -v grep | awk '&#123;print $2&#125;' `[MaX4grep -v x'x'x 不包含x'x'x 的结果 pgrep 通过程序的名字来查询进程egrep 在指定文件中查找指定字符串xargs还有指定参数位置的作用。假设我们要将目录下所有的.py文件放到Python目录中去，可以使用命令 1234find . -name '*.py' | xargs -I &#123;&#125; mv &#123;&#125; ./Python参数-I指定了管道前命令作为参数所应该在管道后面命令的位置find / -name filename 查看文件路径 123456跨服务器传输文件 SCPscp [参数] [文件原路径] [目标路径]- 远程 - 本地 scp root@ip:/path /localpath- 本地 -- 远程 scp localpath root@ip:/pathrsync 123456789101112telnet ip port(没有:)nc（netcat）:- 端口扫描nc -z -v -n 127.0.0.1 21-25-z :连接成功后立即关闭连接，不进行数据交换-v : 详细输出-n :不使用DNS解析(使用使用域名时，不加该参数-u : -u参数调整为udp,默认为TCP)网络请求工具：curlcurl -X POST -H 'Expect:' -d @aa.txt http://192.168.101.7:52433/com.xxx.api.LoanApplyService:1.0.0/loanApply# --header 'Expect:'会去掉curl对参数长度1024的限制# -d@aa.txt 指定使用aa.txt中的内容作为参数 123后台启动：nohup ` 应用启动命令` &amp;bg , fg , ctrl +z , jobs :（见图bg fg.png）ctrl +z ： 把当前进程挂起 1234brew（mac） yum(linux) wget(centos) apt-get(ubantu) :应用下载工具rpm -ivh 安装rpm -Uvh 更新rpm -e 卸载 123tar -cvf 压缩tar -xvf 解压unzip 123cat/tac head/tail -f 从头/尾 查看 -f 实时查看more/less 分页 ln 创建链接12345678vim/vi 编辑器touch 新建空白文件-r 递归-f 强制 --force-a all-h 友好格式 -v 显示详情 --view-l list chmod +r/w/x filename 123456789mv 移动文件 同一文件夹下重命名rm 删除cpsort 排序unique -c（count）mkdir -p 创建多级文件夹sed 流式编辑器 '行内编辑器'awk awk '&#123;BEGIN&#123;cmd&#125; &#123;cmd&#125; END&#123;cmd&#125;&#125;'wc -l 统计行数 -w 统计字数 统计 1234567891011121314151617181920212223防火墙配置firewall-cmd --state '查看防火墙状态'systemctl status firewalld.servicesystemctl stop firewalld.service #停止firewallsystemctl disable firewalld.service #禁止firewall开机启动iptables服务命令-- 启动服务# /etc/init.d/iptables start # service iptables start-- 停止服务# /etc/init.d/iptables stop# service iptables stop-- 重启服务# /etc/init.d/iptables restart# service iptables restart-- 保存设置# /etc/init.d/iptables save# service iptables save 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211222. 配置Filter表防火墙 1. 查看iptables的配置信息# iptables -L -n 1. 清除原有防火墙规则 ● 清除预设表filter中的所有规则链的规则# iptables -F ● 清除预设表filter中使用者自定链中的规则# iptables -X ● 保存防火墙设置# /etc/init.d/iptables save或# service iptables save 1. 设定预设规则-- 请求接入包丢弃[root@home ~]# iptables -p INPUT DROP-- 接受响应数据包[root@home ~]# iptables -p OUTPUT ACCEPT-- 转发数据包丢弃 [root@home ~]# iptables -p FORWARD DROP 1. 添加防火墙规则首先添加INPUT链,INPUT链的默认规则是DROP,所以我们就写需要ACCETP(通过)的链。 ● 开启SSH服务端口[root@tp ~]# iptables -A INPUT -p tcp --dport 22 -j ACCEPT[root@tp ~]# iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT 注:如果在预设设置把OUTPUT设置成DROP策略的话，就需要设置OUTPUT规则，否则无法进行SSH连接。 ● 开启Web服务端口[root@tp ~]# iptables -A OUTPUT -p tcp --sport 80 -j ACCEPT[root@tp ~]# iptables -A INPUT -p tcp --dport 80 -j ACCEPT ● 开启邮件服务的25、110端口[root@tp ~]# iptables -A INPUT -p tcp --dport 110 -j ACCEPT[root@tp ~]# iptables -A INPUT -p tcp --dport 25 -j ACCEPT ● 开启FTP服务的21端口[root@tp ~]# iptables -A INPUT -p tcp --dport 21 -j ACCEPT[root@tp ~]# iptables -A INPUT -p tcp --dport 20 -j ACCEPT ● 开启DNS服务的53端口[root@tp ~]# iptables -A INPUT -p tcp --dport 53 -j ACCEPT ● 设置icmp服务[root@tp ~]# iptables -A OUTPUT -p icmp -j ACCEPT (OUTPUT设置成DROP的话)[root@tp ~]# iptables -A INPUT -p icmp -j ACCEPT (INPUT设置成DROP的话)[MaZ:[MaZ:[MaZ:[MaZ:[MaZ: ● 允许loopback[MaZ:[MaZ:不然会导致DNS无法正常关闭等问题[MaZ:[root@tp ~]# IPTABLES -A INPUT -i lo -p all -j ACCEPT [MaZ:[MaZ:(如果是INPUT DROP)[MaZ:[root@tp ~]# IPTABLES -A OUTPUT -o lo -p all -j ACCEPT[MaZ:[MaZ:(如果是OUTPUT DROP)[MaZ:[MaZ:[MaZ: ● 减少不安全的端口连接[root@tp ~]# iptables -A OUTPUT -p tcp --sport 31337 -j DROP[root@tp ~]# iptables -A OUTPUT -p tcp --dport 31337 -j DROP说明：有些特洛伊木马会扫描端口31337到31340(即黑客语言中的 elite 端口)上的服务。既然合法服务都不使用这些非标准端口来通信,阻塞这些端口能够有效地减少你的网络上可能被感染的机器和它们的远程主服务器进行独立通信的机会。此外，其他端口也一样,像:31335、27444、27665、20034 NetBus、9704、137-139（smb）,2049(NFS)端口也应被禁止。 ● 只允许某台主机或某个网段进行SSH连接只允许192.168.0.3的机器进行SSH连接[root@tp ~]# iptables -A INPUT -s 192.168.0.3 -p tcp --dport 22 -j ACCEPT如果允许或限制一段IP地址可用192.168.0.0/24表示192.168.0.1-255端的所有IP, 24表示子网掩码数。[root@tp ~]# iptables -A INPUT -s 192.168.0.0/24 -p tcp --dport 22 -j ACCEPT注意：指定某个主机或者某个网段进行SSH连接，需要在iptables配置文件中的-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT删除，因为它表示所有地址都可以登陆.如果只允许除了192.168.0.3的主机外都能进行SSH连接[root@tp ~]# iptables -A INPUT -s ! 192.168.0.3 -p tcp --dport 22 -j ACCEPT ● 开启转发功能在做NAT网络配置时,FORWARD默认规则是DROP时,必须开启数据包转发功能[root@tp ~]# iptables -A FORWARD -i eth0 -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT[root@tp ~]# iptables -A FORWARD -i eth1 -o eh0 -j ACCEPT ● 丢弃坏的TCP包[root@tp ~]#iptables -A FORWARD -p TCP ! --syn -m state --state NEW -j DROP ● 处理IP碎片数量，防止DDOS攻击，允许每秒100个[root@tp ~]#iptables -A FORWARD -f -m limit --limit 100/s --limit-burst 100 -j ACCEPT[MaXA[MaXA[MaXA[MaXA[MaXA ● 设置ICMP包过滤, 允许每秒1个包, 限制触发条件是10个包[MaXA[MaXA[root@tp ~]#iptables -A FORWARD -p icmp -m limit --limit 1/s --limit-burst 10 -j ACCEPT[MaXA[MaXA[MaXA ● DROP非法连接[MaXA[root@tp ~]# iptables -A INPUT -m state --state INVALID -j DROP[root@tp ~]# iptables -A OUTPUT -m state --state INVALID -j DROP[root@tp ~]# iptables -A FORWARD -m state --state INVALID -j DROP ● 允许所有已经建立的和相关的连接[root@tp ~]# iptables-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT[root@tp ~]# iptables-A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT[root@tp ~]# /etc/rc.d/init.d/iptables save3. 配置NAT表防火墙 1. 查看本机关于NAT的设置情况[root@tp rc.d]# iptables -t nat -L 1. 清除NAT规则[root@tp ~]# iptables -F -t nat[root@tp ~]# iptables -X -t nat[root@tp ~]# iptables -Z -t nat 1. 添加规则添加基本的NAT地址转换，添加规则时，我们只添加DROP链，因为默认链全是ACCEPT。 ● 防止外网用内网IP欺骗[root@tp sysconfig]# iptables -t nat -A PREROUTING -i eth0 -s 10.0.0.0/8 -j DROP[root@tp sysconfig]# iptables -t nat -A PREROUTING -i eth0 -s 172.16.0.0/12 -j DROP[root@tp sysconfig]# iptables -t nat -A PREROUTING -i eth0 -s 192.168.0.0/16 -j DROP ● 禁止与211.101.46.253的所有连接[root@tp ~]# iptables -t nat -A PREROUTING -d 211.101.46.253 -j DROP ● 禁用FTP(21)端口[root@tp ~]# iptables -t nat -A PREROUTING -p tcp --dport 21 -j DROP只禁用211.101.46.253地址的FTP连接,其他连接可以进行。[root@tp ~]# iptables -t nat -A PREROUTING -p tcp --dport 21 -d 211.101.46.253 -j DROP 1234567891011121314151617181920212223242526272829303132333435363738394041424344//linux 命令行快捷键Ctrl-A 相当于HOME键，用于将光标定位到本行最前面Ctrl-E 相当于End键，即将光标移动到本行末尾Ctrl-B 相当于左箭头键，用于将光标向左移动一格Ctrl-F 相当于右箭头键，用于将光标向右移动一格Ctrl-D 相当于Del键，即删除光标所在处的字符Ctrl-K 用于删除从光标处开始到结尾处的所有字符Ctrl-L 清屏，相当于clear命令Ctrl-R 进入历史命令查找状态，然后你输入几个关键字符，就可以找到你使用过的命令Ctrl-U 用于删除从光标开始到行首的所有字符。一般在密码或命令输入错误时常用Ctrl-H 删除光标左侧的一个字符Ctrl-W 用于删除当前光标左侧的一个单词Ctrl-P 相当于上箭头键，即显示上一个命令Ctrl-N 相当于下箭头键，即显示下一个命令Ctrl-T 用于颠倒光标所在处字符和前一个字符的位置。（目前不知道有什么作用，哪位朋友知道？）Ctrl-J 相当于回车键[MaXA[MaXA[MaXA[MaXAAlt-. 用于提取历史命令中的最后一个单词。你先执行history命令，然后再敲击此快捷键若干下，你就懂了！[MaXA[MaXA[MaXAAlt-BackSpace 用于删除本行所有的内容，基本上和Ctrl-U类似。[MaXAAlt-C 用于将当前光标处的字符变成大写，同时本光标所在单词的后续字符都变成小写。Alt-L 用于将光标所在单词及所在单词的后续字符都变成小写。Alt-U 用于将光标所在单词的光标所在处及之后的所有字符变成大写。$(linux 命令) 得到命令的执行结果，可以作为其他命令的参数[M`XA[M`XA[M`XA[M`XA[M`XA[M`XA[M`XA[M`XA[M`XA [M`XA12345678910111213141516171819202122232425262728293031323334353637383940414243444546[M`XAvim 快捷键[M`XA[M`XA[M`XA[M`XA[M`XA[M`XAj 下移动k 上移动[MaXA[MaXA0 移动到行首[MaXA[MaXA[MaXA[MaXA$ 移动到行末，1$表示当前行的行尾，2$表示当前行的下一行的行尾[MaXA[MaXAb 移动到单词的开始e 移动到单词的末尾G 移动到文档最后一行[MaZF[MaZF[MaZF[MaZFgg 移动到文档第一行[MaZF[MaZF[MaZFv 进入光标模式，配合移动键选中多行u 撤销上一次操作dw 删除光标所在的单词[Ma\I[Ma\I[Ma\I[Ma\Idd 删除光标当前行[Ma\IdG 删除光标后的全部文字y 复制当前行，会复制换行符[Ma\Iyy 复制当前行的内容yyp 复制当前行到下一行，此复制不会放到剪切板中nyy 复制当前开始的n行p 粘贴ddp 当前行和下一行互换位置(dd删除的内容会保存到粘贴板)[Ma\I[Ma\I[Ma\I[Ma\I[Ma\I[Ma\I[Ma\IJ 合并行[Ma\I[Ma\I[Ma\IZZ 保存离开[Ma\I[Ma\I[Ma\I* 向下查找同样光标的字符# 向上查找同样光标的字符/code 查找 code 一样的内容，向后?code 查找 code 一样的内容，向前n 查找下一处N 查找上一处ma 在光标处做一个名叫a的标记 可用26个标记 (a~z)`a 移动到一个标记ad`a 删除当前位置到标记a之间的内容:marks 查看所有标记:w filename 另存为 filename:jumps 历史编辑文档记录:set nu 设置行号显示:set nonu 取消行号显示:set 显示设置参数:set autoindent 自动缩排，回车与第一个非空格符对齐syntax on/off 根据程序语法高亮显示:set highlight 高亮设置查看:set hlsearch 查找代码高亮显示:nohlsearch 暂时关闭高亮显示:set nohlsearch 永久关闭高亮显示:set bg=dark 设置暗色调:set bg=light 设置亮色调 devtoolset 安装方法(devtoolset-7 链接)12345678910111213141516# 1. Install a package with repository for your system:# On CentOS, install package centos-release-scl available in CentOS repository:$ sudo yum install centos-release-scl# On RHEL, enable RHSCL repository for you system:$ sudo yum-config-manager --enable rhel-server-rhscl-7-rpms# 2. Install the collection:$ sudo yum install devtoolset-7# 3. Start using software collections:$ scl enable devtoolset-7 bash(临时)$ echo `source /opt/rh/devtoolset-7/enable` &gt;&gt; ~/.bashrc ssh 公玥认证 1231. ssh-keygen -t rsa2. ssh user@host 'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys' &lt; ~/.ssh/id_rsa.pub3. ssh ubuntu@118.89.235.114 ssh 私钥登录 1ssh -i 私钥文件路径 root@192.168.112.80 zsh 安装 brew install zsh sh -c “$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot; ~/.zshrc 加入以下内容 高亮设置 git clone https://github.com/zsh-users/zsh-syntax-highlighting.git echo &quot;source ${(q-)PWD}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot; &gt;&gt; ${ZDOTDIR:-$HOME}/.zshrc source ./zsh-syntax-highlighting/zsh-syntax-highlighting.zsh iterm2 使用rz(下载) sz（上传） brew install lrzsz cd ／usr/local/bin sudo wget https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-send-zmodem.sh sudo wget https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-recv-zmodem.sh sudo chmod 777 /usr/local/bin/iterm2-* 添加触发器 打开Item2，点击preferences → profiles，选择某个profile，如Default，之后继续选择advanced → triggers，添加编辑添加如下triggers： rz waiting to receive. 可以不加 Regular Expression Action Parameters rz waiting to receive.\\B0100 Run Silent Coprocess /usr/local/bin/iterm2-send-zmodem.sh \\B00000000000000 Run Silent Coprocess /usr/local/bin/iterm2-recv-zmodem.sh 终端输出颜色123\033[字背景颜色;字体颜色m字符串\033[0m字体背景色数值 40 - 49（可省略）字体颜色数值 30 - 39 12345nslookup - 域名与ip互查rcp 与scp类似init 6 重启uptime 查看系统负载时间ipcs 进程间通信信息 32位 vs 64 位 ` 32位操作系统针对的32位的CPU设计。 64位操作系统针对的64位的CPU设计。 32位的CPU一次(可能包含多个指令)只能处理32位的数据(即4个字节称为一个机器字) 同理，64位CPU一次能处理64的数据(即8个字节的数据) 所以32位的一个机器字位4个字节，64位的一个机器字位8个字节]]></content>
  </entry>
</search>
