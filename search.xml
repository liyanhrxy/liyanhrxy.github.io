<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Java</title>
      <link href="/2018/10/17/java/"/>
      <url>/2018/10/17/java/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java 常用指令</p><ul><li>javac  – <strong>编译.java源文件</strong></li><li>java – <strong>运行.class字节码文件</strong>  -jar</li><li>javaw – <strong>后台运行.class字节码文件</strong></li><li>javap –  <strong>反编译.class字节码文件</strong><br>启动jar包程序：</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=<span class="number">8004</span> coin-processor-btc*.jar  <span class="number">1</span>&gt; btc-search.out <span class="number">2</span>&gt;btc-search.err  &amp;</span><br></pre></td></tr></table></figure><h4 id="Java存储"><a href="#Java存储" class="headerlink" title="Java存储"></a>Java存储</h4><ul><li>寄存器</li><li>stack（栈）预分配内存</li><li>heap（内存堆）：动态分配内存</li><li>方法区（常量池…..）  常数值</li></ul><hr><blockquote><p>Java8新特性</p></blockquote><blockquote><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/index.html">stream</a></p><ul><li>接口 方法声明，成员变量默认为static.final类型,可以有方法实现。称之为默认方法。使用default关键字<br>函数式编程之函数式接口的应用</li></ul><ol><li>Function   –apply()</li><li>Consume   –accept()</li><li>Predicate –test()<br>java8 Optional类</li></ol></blockquote><ul><li>java.util.Optional<T>类是一个封装了Optional值的==容器对象==，Optional值可以为null，如果值存在，调用isPresent()方法返回true，调用get()方法可以获取值.</li><li><p>创建Optional对象(静态方法)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果函数返回所需的对象，请使用map;如果函数返回Optional，则使用flatMap。例如：</span><br><span class="line"></span><br><span class="line">  -map :</span><br><span class="line">  -flatMap :</span><br></pre></td></tr></table></figure><p>-filter </p></li><li><p><code>empty()</code>  用于创建一个没有值的Optional对象</p><ul><li><code>of()</code>  使用一个非空的值创建Optional对象</li><li><code>ofNullable()</code> 如果str的值为null，得到的nullableOpt是一个没有值的Optional对象</li></ul></li><li><p>使用<code>orElse(&quot;&quot;)</code>方法获取值如果有值就返回，否则返回一个给定的值作为默认值</p></li><li><p><code>orElseGet(() -&gt; func())</code>：与orElse()方法作用类似，区别在于生成默认值的方式不同。该方法接受一个Supplier&lt;? extends T&gt;函数式接口参数，用于生成默认值</p></li><li><p><code>orElseThrow()</code>：与前面介绍的get()方法类似，当值为null时调用这两个方法都会抛出NullPointerException异常，区别在于该方法可以指定抛出的异常类型</p></li><li><code>ifPresent(dosoming)</code> :如果该optional对象不为null,执行dosomeing,否则什么都不做。</li></ul><hr><blockquote><p>重要概念</p><ul><li>IOC(控制反转): 控制反转是一种在软件工程中解耦合的思想，调用类只依赖接口，而不依赖具体的实现类，减少了耦合。控制权交给了容器，在运行的时候才由容器决定将具体的实现动态的“注入”到调用类的对象中<br><img src="http://7xjtfr.com1.z0.glb.clouddn.com/%E9%BD%BF%E8%BD%AE_%E8%80%A6%E5%90%88%E5%85%B3%E7%B3%BB_full.jpg" alt="image"><br><img src="http://7xjtfr.com1.z0.glb.clouddn.com/%E9%BD%BF%E8%BD%AE_%E8%A7%A3%E8%80%A6%E5%90%88_full.jpg" alt="image"></li></ul></blockquote><ul><li>DI : 依赖注入(依赖注入是一种设计模式，可以作为控制反转的一种实现方式。依赖注入就是将实例变量传入到一个对象中去(Dependency injection means giving an object its instance variables)) <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 依赖</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Father father;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Human</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        father = <span class="keyword">new</span> Father();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 问题</span></span><br><span class="line"><span class="number">1</span>.如果现在要改变 father 生成方式，如需要用<span class="keyword">new</span> Father(String name)初始化 father，需要修改 Human 代码；</span><br><span class="line"><span class="number">2</span>.如果想测试不同 Father 对象对 Human 的影响很困难，因为 father 的初始化被写死在了 Human 的构造函数中；</span><br><span class="line"><span class="number">3</span>.如果<span class="keyword">new</span> Father()过程非常缓慢，单测时我们希望用已经初始化好的 father 对象 Mock 掉这个过程也很困难。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依赖注入</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Father father;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Human</span><span class="params">(Father father)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.father = father;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">上面代码中，我们将 father 对象作为构造函数的一个参数传入。在调用 Human 的构造方法之前外部就已经初始化好了 Father 对象。像这种非自己主动初始化依赖，而通过外部来传入依赖的方式，我们就称为依赖注入。</span><br><span class="line">现在我们发现上面例子 中存在的两个问题都很好解决了，简单的说依赖注入主要有两个好处：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>.解耦，将依赖之间解耦。</span><br><span class="line"><span class="number">2</span>.因为已经解耦，所以方便做单元测试，尤其是 Mock 测试。</span><br><span class="line"></span><br><span class="line"><span class="comment">//完整例子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span>...</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">MovieFinder</span> <span class="title">finder</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFinder</span><span class="params">(MovieFinder finder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.finder = finder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColonMovieFinder</span>...</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">setFilename</span>(<span class="title">String</span> <span class="title">filename</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filename = filename;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithSpring</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ApplicationContext ctx = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"spring.xml"</span>);<span class="comment">//1</span></span><br><span class="line">    MovieLister lister = (MovieLister) ctx.getBean(<span class="string">"MovieLister"</span>);<span class="comment">//2</span></span><br><span class="line">    Movie[] movies = lister.moviesDirectedBy(<span class="string">"Sergio Leone"</span>);</span><br><span class="line">    assertEquals(<span class="string">"Once Upon a Time in the West"</span>, movies[<span class="number">0</span>].getTitle());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ApplicationContext 即IOC容器</span></span><br><span class="line"><span class="comment">//从容器中获取MovieLister实例</span></span><br><span class="line"> ```   </span><br><span class="line">  ```xml</span><br><span class="line">  &lt;beans&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"MovieLister"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"spring.MovieLister"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"finder"</span>&gt;</span><br><span class="line">            &lt;ref local=<span class="string">"MovieFinder"</span>/&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"MovieFinder"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"spring.ColonMovieFinder"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"filename"</span>&gt;</span><br><span class="line">            &lt;value&gt;movies1.txt&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>spring aop (aspectj静态织入需要ajc编译器的支持)</p><ul><li>spring aop 运用==动态代理==(JDK动态代理底层靠【反射】CGLIB底层靠【继承】)实现动态注入.</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">public interface UserDao &#123;</span><br><span class="line"></span><br><span class="line">    int addUser();</span><br><span class="line"></span><br><span class="line">    void updateUser();</span><br><span class="line"></span><br><span class="line">    void deleteUser();</span><br><span class="line"></span><br><span class="line">    void findUser();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line">@Repository</span><br><span class="line">public class UserDaoImp implements UserDao &#123;</span><br><span class="line"></span><br><span class="line">    public int addUser() &#123;</span><br><span class="line">        System.out.println(&quot;add user ......&quot;);</span><br><span class="line">        return 6666;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void updateUser() &#123;</span><br><span class="line">        System.out.println(&quot;update user ......&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void deleteUser() &#123;</span><br><span class="line">        System.out.println(&quot;delete user ......&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void findUser() &#123;</span><br><span class="line">        System.out.println(&quot;find user ......&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------</span><br><span class="line">import org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line">import org.aspectj.lang.annotation.*;</span><br><span class="line"></span><br><span class="line">@Aspect</span><br><span class="line">public class MyAspect &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 前置通知</span><br><span class="line">     */</span><br><span class="line">    @Before(&quot;execution(* UserDao.addUser(..))&quot;)</span><br><span class="line">    public void before()&#123;</span><br><span class="line">        System.out.println(&quot;前置通知....&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 后置通知</span><br><span class="line">     * returnVal,切点方法执行后的返回值</span><br><span class="line">     */</span><br><span class="line">    @AfterReturning(value=&quot;execution(* UserDao.addUser(..))&quot;,returning = &quot;returnVal&quot;)</span><br><span class="line">    public void AfterReturning(Object returnVal)&#123;</span><br><span class="line">        System.out.println(&quot;后置通知....&quot;+returnVal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 环绕通知</span><br><span class="line">     * @param joinPoint 可用于执行切点的类</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Throwable</span><br><span class="line">     */</span><br><span class="line">    @Around(&quot;execution(* UserDao.addUser(..))&quot;)</span><br><span class="line">    public Object around(ProceedingJoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;环绕通知前....&quot;);</span><br><span class="line">        Object obj= (Object) joinPoint.proceed();</span><br><span class="line">        System.out.println(&quot;环绕通知后....&quot;);</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 抛出通知</span><br><span class="line">     * @param e</span><br><span class="line">     */</span><br><span class="line">    @AfterThrowing(value=&quot;execution(* UserDao.addUser(..))&quot;,throwing = &quot;e&quot;)</span><br><span class="line">    public void afterThrowable(Throwable e)&#123;</span><br><span class="line">        System.out.println(&quot;出现异常:msg=&quot;+e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 无论什么情况下都会执行的方法</span><br><span class="line">     */</span><br><span class="line">    @After(value=&quot;execution(* UserDao.addUser(..))&quot;)</span><br><span class="line">    public void after()&#123;</span><br><span class="line">        System.out.println(&quot;最终通知....&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.test.context.ContextConfiguration;</span><br><span class="line">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(locations= &quot;classpath:beans.xml&quot;)</span><br><span class="line">public class UserDaoAspectJ &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void aspectJTest()&#123;</span><br><span class="line">        userDao.addUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//输出</span><br><span class="line"></span><br><span class="line">环绕通知前....</span><br><span class="line">前置通知....</span><br><span class="line">add user ......</span><br><span class="line">环绕通知后....</span><br><span class="line">最终通知....</span><br><span class="line">后置通知....6666</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">beans.xml</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/aop</span><br><span class="line">        http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 启动@aspectj的自动代理支持--&gt;</span><br><span class="line">    &lt;aop:aspectj-autoproxy /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 定义目标对象 --&gt;</span><br><span class="line">    &lt;bean id=&quot;userDaos&quot; class=&quot;UserDaoImp&quot;/&gt;</span><br><span class="line">    &lt;!-- 定义aspect类 --&gt;</span><br><span class="line">    &lt;bean name=&quot;myAspectJ&quot; class=&quot;MyAspect&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><ul><li>泛型 : 泛型类 泛型接口 泛型方法(返回值前面加&lt;&gt;)</li><li>抽象类 有抽象方法的类</li><li>内部类（定义在类内部的类，作为类的成员变量）</li><li>重载(方法名相同，参数列表不同，与返回值无关)</li><li>重写(方法实现逻辑不同，其他完全一样)<blockquote><p>类加载机制</p></blockquote></li><li>类加载器(3种，双亲委托加载机制)（bootstrapClassLoder ,etcClassLoder ,appClassLoder）</li><li>初始化顺序：<br>静态方法，静态变量，静态代码块，代码块，构造方法，</li></ul><blockquote><p>final(一定会执行)</p></blockquote><blockquote><p>finalize(垃圾回收)</p></blockquote><blockquote><p>多线程并发</p><ul><li>创建线程的三种常用方法：</li></ul></blockquote><ol><li><p>继承thread类</p></li><li><p>实现Runable接口(重写 run() 方法)</p></li><li><p>Callable（重写call()方法） 和Future(接口类似于go里的context接口)（FutureTask)(实现了Runable和Future接口–&gt; 运行在子线程并且可控)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Callable+FutureTask 获取执行结果</span></span><br><span class="line">       <span class="comment">/* ExecutorService executor = Executors.newCachedThreadPool();</span></span><br><span class="line"><span class="comment">        Task task = new Task();</span></span><br><span class="line"><span class="comment">        FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;Integer&gt;(task);</span></span><br><span class="line"><span class="comment">        executor.submit(futureTask);</span></span><br><span class="line"><span class="comment">        executor.shutdown();*/</span></span><br><span class="line">        <span class="comment">//第二种方式，注意这种方式和第一种方式效果是类似的，只不过一个使用的是ExecutorService，一个使用的是Thread</span></span><br><span class="line">        <span class="comment">/*Task task = new Task();</span></span><br><span class="line"><span class="comment">        FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;Integer&gt;(task);</span></span><br><span class="line"><span class="comment">        Thread thread = new Thread(futureTask);</span></span><br><span class="line"><span class="comment">        thread.start();*/</span></span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        Task task = <span class="keyword">new</span> Task();</span><br><span class="line">        Future&lt;Integer&gt; result = executorService.submit(task);</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">          System.out.println(<span class="string">"主线程在执行任务"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"运行结果"</span> + result.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">        System.out.println(<span class="string">"所有任务执行完毕"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span>  Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子线程正在进行计算"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">100</span>; i++)</span><br><span class="line">            sum += i;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><a href="https://www.jb51.net/article/134862.htm">ExecutorService</a>(接口—&gt; Java中的线程池实现)</p></blockquote><ul><li>Executors提供的四种线程 </li></ul><ol><li>newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Thread.sleep(index * <span class="number">1000</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  executorService.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">","</span> +index);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//控制台信息</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>,<span class="number">2</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>,<span class="number">3</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>,<span class="number">4</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService fixedThreadPool = Executors.newFixedThreadPool(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">    fixedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">", "</span> + index);</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//控制台信息</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>,<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>,<span class="number">2</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">4</span>,<span class="number">3</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>,<span class="number">4</span></span><br></pre></td></tr></table></figure></li><li><p>newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line">System.out.println(<span class="string">"before:"</span> + System.currentTimeMillis()/<span class="number">1000</span>);</span><br><span class="line">scheduledThreadPool.schedule(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"延迟3秒执行的哦 :"</span> + System.currentTimeMillis()/<span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">System.out.println(<span class="string">"after :"</span> +System.currentTimeMillis()/<span class="number">1000</span>);</span><br><span class="line"><span class="comment">//控制台信息</span></span><br><span class="line">before:<span class="number">1518012703</span></span><br><span class="line">after :<span class="number">1518012703</span></span><br><span class="line">延迟<span class="number">3</span>秒执行的哦 :<span class="number">1518012706</span></span><br><span class="line">System.out.println(<span class="string">"before:"</span> + System.currentTimeMillis()/<span class="number">1000</span>);</span><br><span class="line">scheduledThreadPool.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"延迟1秒之后，3秒执行一次:"</span> +System.currentTimeMillis()/<span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">1</span>, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">System.out.println(<span class="string">"after :"</span> +System.currentTimeMillis()/<span class="number">1000</span>);</span><br><span class="line">控制台消息</span><br><span class="line">before:<span class="number">1518013024</span></span><br><span class="line">after :<span class="number">1518013024</span></span><br><span class="line">延迟<span class="number">1</span>秒之后，<span class="number">3</span>秒执行一次:<span class="number">1518013025</span></span><br><span class="line">延迟<span class="number">1</span>秒之后，<span class="number">3</span>秒执行一次:<span class="number">1518013028</span></span><br><span class="line">延迟<span class="number">1</span>秒之后，<span class="number">3</span>秒执行一次:<span class="number">1518013031</span></span><br></pre></td></tr></table></figure></li><li><p>newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">  singleThreadExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         System.out.println(Thread.currentThread().getName() + <span class="string">","</span> + index);</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">控制台信息</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>,<span class="number">2</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>,<span class="number">3</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>,<span class="number">4</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>execute()和submit()区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">向线程池提交任务 ThreadPoolExecutor类中execute()和submit()区别 execute()方法实际上是Executor中声明的方法，在ThreadPoolExecutor进行了具体的实现，这个方法是ThreadPoolExecutor的核心方法，通过这个方法可以向线程池提交一个任务，交由线程池去执行。</span><br><span class="line"></span><br><span class="line">submit()方法是在ExecutorService中声明的方法，在AbstractExecutorService就已经有了具体的实现，在ThreadPoolExecutor中并没有对其进行重写，这个方法也是用来向线程池提交任务的，但是它和execute()方法不同，它能够返回任务执行的结果，通过源码查看submit()方法的实现，会发现它实际上还是调用的execute()方法，只不过它利用了Future来获取任务执行结果。</span><br><span class="line">/**</span><br><span class="line"> * @throws RejectedExecutionException &#123;@inheritDoc&#125;</span><br><span class="line"> * @throws NullPointerException    &#123;@inheritDoc&#125;</span><br><span class="line"> */</span><br><span class="line">public Future&lt;?&gt; submit(Runnable task) &#123;</span><br><span class="line">  if (task == null) throw new NullPointerException();</span><br><span class="line">  RunnableFuture&lt;Void&gt; ftask = newTaskFor(task, null);</span><br><span class="line">  execute(ftask);</span><br><span class="line">  return ftask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>线程池关闭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">线程池的关闭 我们可以通过调用线程池的shutdown或shutdownNow方法来关闭线程池，但是它们的实现原理不同，shutdown的原理是只是将线程池的状态设置成SHUTDOWN状态，然后中断所有没有正在执行任务的线程。shutdownNow的原理是遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程，所以无法响应中断的任务可能永远无法终止。shutdownNow会首先将线程池的状态设置成STOP，然后尝试停止所有的正在执行或暂停任务的线程，并返回等待执行任务的列表。</span><br><span class="line"></span><br><span class="line">只要调用了这两个关闭方法的其中一个，isShutdown方法就会返回true。当所有的任务都已关闭后,才表示线程池关闭成功，这时调用isTerminaed方法会返回true。至于我们应该调用哪一种方法来关闭线程池，应该由提交到线程池的任务特性决定，通常调用shutdown来关闭线程池，如果任务不一定要执行完，则可以调用shutdownNow。</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>线程的方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wait(),notify()和notifyAll()都是java.lang.Object的方法：</span><br><span class="line">wait(): <span class="function">Causes the current thread to wait until another thread invokes the <span class="title">notify</span><span class="params">()</span> method or the <span class="title">notifyAll</span><span class="params">()</span> method <span class="keyword">for</span> <span class="keyword">this</span> object.</span></span><br><span class="line"><span class="function"><span class="title">notify</span><span class="params">()</span>: Wakes up a single thread that is waiting on <span class="keyword">this</span> object's monitor.</span></span><br><span class="line"><span class="function"><span class="title">notifyAll</span><span class="params">()</span>: Wakes up all threads that are waiting on <span class="keyword">this</span> object's monitor.</span></span><br></pre></td></tr></table></figure><p>如果线程调用了对象的wait（）方法，那么线程便会处于该对象的等待池中，等待池中的线程不会去竞争该对象的锁。</p><p>   当有线程调用了对象的notifyAll（）方法（唤醒所有wait线程）或notify（）方法（只随机唤醒一个wait线程），被唤醒的的线程便会进入该对象的锁池中，锁池中的线程会去竞争该对象锁。</p><p>   优先级高的线程竞争到对象锁的概率大，假若某线程没有竞争到该对象锁，它还会留在锁池中，唯有线程再次调用wait（）方法，它才会重新回到等待池中。而竞争到对象锁的线程则继续往下执行，直到执行完了synchronized代码块，它会释放掉该对象锁，这时锁定池中的线程会继续竞争该对象锁</p><ul><li>sleep（线程类方法）</li><li>join ：主线程等待异步线程执行结束(线程类的方法)</li><li>wait ：暂停，直到调用notify或者notifyAll（执行此命令要在与wait不同的线程中）（object类方法）只能在同步方法或同步块中调用wait（）方法</li><li>yield ：暂停一段时间</li><li>notify（object）</li><li>notifyAll（object）</li><li>daemon（后台启动）</li><li><p>suspend（挂起后台进程）</p></li><li><p>synchronized：同步方法、同步代码块（this）、同步静态代码块（.class）</p><blockquote><p>竞态条件 ：当两个或者两个以上的线程同时对象同一变量操作，并且至少有一个写操作时，就会发生线程安全问题。</p></blockquote></li></ul><blockquote><p>同步器</p><ul><li>ConcurrentHashMap</li><li>锁 lock() , trylock()</li><li>信号量（Semaphore）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void acquire() throws InterruptedException &#123;  &#125;     //获取一个许可</span><br><span class="line">public void release() &#123; &#125;          //释放一个许可</span><br><span class="line">public boolean tryAcquire() &#123; &#125;;    //尝试获取一个许可，若获取成功，则立即返回true，若获取失败，则立即返回false</span><br><span class="line">public boolean tryAcquire(long timeout, TimeUnit unit) throws InterruptedException &#123; &#125;;  //尝试获取一个许可，若在指定的时间内获取成功，则立即返回true，否则则立即返回false</span><br><span class="line">public boolean tryAcquire(int permits) &#123; &#125;; //尝试获取permits个许可，若获取成功，则立即返回true，若获取失败，则立即返回false</span><br><span class="line">public boolean tryAcquire(int permits, long timeout, TimeUnit unit) throws InterruptedException &#123; &#125;; //尝试获取permits个许可，若在指定的时间内获取成功，则立即返回true，否则则立即返回false</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>原子操作(automic类)</li><li>并发数据结构(BlockingQueue)</li><li>CAS乐观锁 compareAndSet()</li><li><a href="https://www.cnblogs.com/dolphin0520/p/3920397.html">CountDownLatch和CyclicBarrier(回环栅栏)</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CountDownLatch和CyclicBarrier都能够实现线程之间的等待，只不过它们侧重点不同：</span><br><span class="line">CountDownLatch一般用于某个线程A等待若干个其他线程执行完任务之后，它才执行；</span><br><span class="line"></span><br><span class="line">CyclicBarrier一般用于一组线程互相等待至某个状态，然后这一组线程再同时执行；</span><br><span class="line"></span><br><span class="line">另外，CountDownLatch是不能够重用的，而CyclicBarrier是可以重用的</span><br></pre></td></tr></table></figure></li></ul><h4 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h4><ul><li>打包命令    <code>mvn  clean package</code></li></ul><blockquote><p>slf4j 不能打印日志</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- or use LATEST --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- or use LATEST --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>指明Java版本</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h4><blockquote><p>Eureka是Netflix开源的一款提供服务注册和发现的产品，它提供了完整的Service Registry和Service Discovery实现。也是springcloud体系中最重要最核心的组件之一。<br>服务中心又称注册中心，管理各种服务功能包括服务的注册、发现、熔断、负载、降级等，比如dubbo admin后台的各种功能。</p></blockquote><ul><li>Eureka Server</li></ul><ol><li>提供服务注册和发现</li></ol><ul><li>Service Provider</li></ul><ol><li>服务提供方</li><li>将自身服务注册到Eureka，从而使服务消费方能够找到</li></ol><ul><li>Service Consumer</li></ul><ol><li>服务消费方</li><li>从Eureka获取注册服务列表，从而能够消费服务<blockquote><p>Eureka Server</p></blockquote></li></ol><p>==所有的服务端及访问服务的客户端都需要连接到注册管理器（eureka服务器)==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">让服务使用eureka服务器，只需添加@EnableDiscoveryClient注解就可以了。回到我们在上篇文章中实现的cloud-simple-service微服务应用。在main方法所在的Application类中，添加@EnableDiscoveryClient注解。然后在配置文件中添加：</span><br><span class="line"></span><br><span class="line">　　eureka.client.serviceUrl.defaultZone=http\://localhost\:8761/eureka/</span><br><span class="line"></span><br><span class="line">　　spring.application.name=cloud-simple-service</span><br><span class="line"></span><br><span class="line">其中defaultZone是指定eureka服务器的地址，无论是注册还是发现服务都需要这个地址。application.name是指定进行服务注册时该服务的名称这个名称就是后面调用服务时的服务标识符（这是服务发现的功能，我们在后面章节具体介绍）。当然，pom文件也需要增加：</span><br><span class="line"></span><br><span class="line">　　&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">　　　　&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">　　　　&lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">　　&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">　　如此以来该服务启动后会自动注册到eureka服务器。如果在该服务中还需要调用别的服务，那么直接使用那个服务的服务名称加方法名构成的url即可</span><br></pre></td></tr></table></figure><p>spring cloud已经帮我实现了服务注册中心，我们只需要很简单的几个步骤就可以完成。</p><ol><li>pom中添加依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>启动代码中添加@EnableEurekaServer注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">//只需要使用@EnableEurekaServer注解就可以让应用变为Eureka服务器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudEurekaApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  SpringApplication.run(SpringCloudEurekaApplication.class, args);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>配置文件<br>在默认设置下，该服务注册中心也会将自己作为客户端来尝试注册它自己，所以我们需要禁用它的客户端注册行为，在application.properties添加以下配置：</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.application.name=spring-cloud-eureka</span></span><br><span class="line"></span><br><span class="line"><span class="string">server.port=8000</span></span><br><span class="line"><span class="string">eureka.client.register-with-eureka=false</span></span><br><span class="line"><span class="string">eureka.client.fetch-registry=false</span></span><br><span class="line"></span><br><span class="line"><span class="string">eureka.client.serviceUrl.defaultZone=http://localhost:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><ul><li>eureka.client.register-with-eureka ：表示是否将自己注册到Eureka Server，默认为true。</li><li>eureka.client.fetch-registry ：表示是否从Eureka Server获取注册信息，默认为true。</li><li>eureka.client.serviceUrl.defaultZone ：设置与Eureka Server交互的地址，查询服务和注册服务都需要依赖这个地址。默认是<a href="http://localhost:8761/eureka">http://localhost:8761/eureka</a> ；多个地址可使用 , 分隔。<br>启动工程后，访问：<a href="http://localhost:8000/，可以看到下面的页面，其中还没有发现任何服务">http://localhost:8000/，可以看到下面的页面，其中还没有发现任何服务</a></li></ul><blockquote><p>集群</p></blockquote><p>Eureka通过<strong>互相注册</strong>的方式来实现高可用的部署，所以我们只需要将Eureke Server配置其他可用的serviceUrl就能实现高可用部署<br>双节点注册中心<br>首次我们尝试一下双节点的注册中心的搭建。</p><ol><li>创建application-peer1.properties，作为peer1服务中心的配置，并将serviceUrl指向peer2</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.application.name=spring-cloud-eureka</span></span><br><span class="line"><span class="string">server.port=8000</span></span><br><span class="line"><span class="string">eureka.instance.hostname=peer1</span></span><br><span class="line"></span><br><span class="line"><span class="string">eureka.client.serviceUrl.defaultZone=http://peer2:8001/eureka/</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>创建application-peer2.properties，作为peer2服务中心的配置，并将serviceUrl指向peer1</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.application.name=spring-cloud-eureka</span></span><br><span class="line"><span class="string">server.port=8001</span></span><br><span class="line"><span class="string">eureka.instance.hostname=peer2</span></span><br><span class="line"></span><br><span class="line"><span class="string">eureka.client.serviceUrl.defaultZone=http://peer1:8000/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>host转换<br>在hosts文件中加入如下配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">peer1</span>  </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">peer2</span></span><br></pre></td></tr></table></figure></li><li><p>打包启动<br>依次执行下面命令</p></li></ol><ul><li>打包<br><code>mvn clean package</code></li><li>分别以peer1和peeer2 配置信息启动eureka<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar spring-cloud-eureka-<span class="number">0.0</span>.1-SNAPSHOT.jar --spring.profiles.active=peer1</span><br><span class="line">java -jar spring-cloud-eureka-<span class="number">0.0</span>.1-SNAPSHOT.jar --spring.profiles.active=peer2</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>依次启动完成后，浏览器输入：<a href="http://localhost:8000/">http://localhost:8000/</a> 效果图如下：</li></ol><p>根据图可以看出peer1的注册中心DS Replicas已经有了peer2的相关配置信息，并且出现在available-replicas中。我们手动停止peer2来观察，发现peer2就会移动到unavailable-replicas一栏中，表示peer2不可用。<br>到此双节点的配置已经完成。</p><p>在生产中我们可能需要三台或者大于三台的注册中心来保证服务的稳定性，配置的原理其实都一样，将注册中心分别指向其它的注册中心。这里只介绍三台集群的配置情况，其实和双节点的注册中心类似，每台注册中心分别又指向其它两个节点即可，使用application.yml来配置。<br>application.yml配置详情如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-eureka</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">peer1</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8000</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">peer1</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer2:8001/eureka/,http://peer3:8002/eureka/</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-eureka</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">peer2</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">peer2</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer1:8000/eureka/,http://peer3:8002/eureka/</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">spring-cloud-eureka</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">peer3</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8002</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">peer3</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer1:8000/eureka/,http://peer2:8001/eureka/</span></span><br></pre></td></tr></table></figure></p><p>分别以peer1、peer2、peer3的配置参数启动eureka注册中心。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=peer1</span><br><span class="line">java -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=peer2</span><br><span class="line">java -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=peer3</span><br></pre></td></tr></table></figure></p><p>依次启动完成后，浏览器输入：<a href="http://localhost:8000/">http://localhost:8000/</a> 效果图如下：</p><p>可以在peer1中看到了peer2、peer3的相关信息。至此eureka集群也已经完成了</p><h4 id="spring-boot"><a href="#spring-boot" class="headerlink" title="spring boot"></a>spring boot</h4><blockquote><p>什么是spring boot</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。用我的话来理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架（不知道这样比喻是否合适）。</span><br></pre></td></tr></table></figure><p>使用spring boot有什么好处<br>其实就是简单、快速、方便！平时如果我们需要搭建一个spring web项目的时候需要怎么做呢？</p><ol><li>配置web.xml，加载spring和spring mvc</li><li>配置数据库连接、配置spring事务</li><li>配置加载配置文件的读取，开启注解</li><li>配置日志文件</li><li>…</li><li>配置完成之后部署tomcat 调试</li><li>…</li></ol><hr><p>现在非常流行微服务，如果我这个项目仅仅只是需要发送一个邮件，如果我的项目仅仅是生产一个积分；我都需要这样折腾一遍!<br>但是如果使用spring boot呢？<br>很简单，我仅仅只需要非常少的几个配置就可以迅速方便的搭建起来一套web项目或者是构建一个微服务！<br>使用sping boot到底有多爽，用下面这幅图来表达</p><blockquote><p>快速入门</p></blockquote><p>说了那么多，手痒痒的很，马上来一发试试!</p><ul><li>maven构建项目</li></ul><ol><li>访问<a href="http://start.spring.io/">http://start.spring.io/</a></li><li><p>选择构建工具Maven Project、Spring Boot版本1.3.6以及一些工程基本信息，点击“Switch to the full version.”java版本选择1.7，可参考下图所示：</p></li><li><p>点击Generate Project下载项目压缩包</p></li><li>解压后，使用eclipse，Import -&gt; Existing Maven Projects -&gt; Next -&gt;选择解压后的文件夹-&gt; Finsh，OK done!</li></ol><p>项目结构介绍</p><p>如上图所示，Spring Boot的基础结构共三个文件:</p><ul><li>src/main/java 程序开发以及主程序入口</li><li>src/main/resources 配置文件</li><li>src/test/java 测试程序<br>另外，spingboot建议的目录结果如下：<br>root package结构：com.example.myproject<br>com<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+- example</span><br><span class="line">  +- myproject</span><br><span class="line">    +- Application.java</span><br><span class="line">    |</span><br><span class="line">    +- domain</span><br><span class="line">    |  +- Customer.java</span><br><span class="line">    |  +- CustomerRepository.java</span><br><span class="line">    |</span><br><span class="line">    +- service</span><br><span class="line">    |  +- CustomerService.java</span><br><span class="line">    |</span><br><span class="line">    +- controller</span><br><span class="line">    |  +- CustomerController.java</span><br><span class="line">    |</span><br></pre></td></tr></table></figure></li></ul><ol><li>Application.java 建议放到根目录下面,主要用于做一些框架配置</li><li>domain目录主要用于实体（Entity）与数据访问层（Repository）</li><li>service 层主要是业务类代码</li><li>controller 负责页面访问控制<br>采用默认配置可以省去很多配置，当然也可以根据自己的喜欢来进行更改</li><li>最后，启动Application main方法，至此一个java项目搭建好了！</li></ol><blockquote><p>引入web模块</p></blockquote><p>1、pom.xml中添加支持web的模块：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>pom.xml文件中默认有两个模块：</p><p>spring-boot-starter ：核心模块，包括自动配置支持、日志和YAML；</p><p>spring-boot-starter-test ：测试模块，包括JUnit、Hamcrest、Mockito。</p><p>2、编写controller内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RestController 的意思就是controller里面的方法都以json格式输出，不用再写什么jackjson配置的了！</p><p>3、启动主程序，打开浏览器访问<a href="http://localhost:8080/hello，就可以看到效果了，有木有很简单！">http://localhost:8080/hello，就可以看到效果了，有木有很简单！</a></p><p>如何做单元测试</p><p>打开的src/test/下的测试入口，编写简单的http请求来测试；使用mockmvc进行，利用MockMvcResultHandlers.print()打印出执行结果。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(mian函数所在类.class) </span><br><span class="line"><span class="meta">@SpringBootConfiguration</span>  <span class="comment">// 换成这个成功</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> HelloWorldController()).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">"/hello"</span>).accept(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().string(equalTo(<span class="string">"Hello World"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>开发环境的调试</p></blockquote><p>热启动在正常开发项目中已经很常见了吧，虽然平时开发web项目过程中，改动项目启重启总是报错；但springBoot对调试支持很好，修改之后可以实时生效，需要添加以下的配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>该模块在完整的打包环境下运行的时候会被禁用。如果你使用java -jar启动应用或者用一个特定的classloader启动，它会认为这是一个“生产环境”。</p><blockquote><p>总结</p></blockquote><p>使用spring boot可以非常方便、快速搭建项目，使我们不用关心框架之间的兼容性，适用版本等各种问题，我们想使用任何东西，仅仅添加一个配置就可以，所以使用sping boot非常适合构建微服务。</p><h5 id="SpringBoot-Mybatis"><a href="#SpringBoot-Mybatis" class="headerlink" title="SpringBoot Mybatis"></a>SpringBoot Mybatis</h5><ul><li>mybatis-spring-boot-starter</li></ul><p>注解版本</p><ol><li>添加相关maven文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">``` </span><br><span class="line">2. application.properties 添加相关配置</span><br><span class="line">```yml</span><br><span class="line">mybatis.type-aliases-package=com.neo.entity</span><br><span class="line"></span><br><span class="line">spring.datasource.driverClassName = com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.url = jdbc:mysql://localhost:3306/test1?useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">spring.datasource.username = root</span><br><span class="line">spring.datasource.password = root</span><br></pre></td></tr></table></figure><ol start="3"><li>开发Mapper</li></ol><p>第三步是最关键的一块，sql生产都在这里<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Select</span>(<span class="string">"SELECT * FROM users"</span>)</span><br><span class="line"> <span class="meta">@Results</span>(&#123;</span><br><span class="line">  <span class="meta">@Result</span>(property = <span class="string">"userSex"</span>,  column = <span class="string">"user_sex"</span>, javaType = UserSexEnum.class),</span><br><span class="line">  <span class="meta">@Result</span>(property = <span class="string">"nickName"</span>, column = <span class="string">"nick_name"</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="function">List&lt;UserEntity&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="comment">//动态指定表名</span></span><br><span class="line"> <span class="meta">@Select</span>(<span class="string">"SELECT * FROM $&#123;tableName&#125; WHERE id = #&#123;id&#125;"</span>)</span><br><span class="line"> <span class="meta">@Results</span>(&#123;</span><br><span class="line">  <span class="meta">@Result</span>(property = <span class="string">"userSex"</span>,  column = <span class="string">"user_sex"</span>, javaType = UserSexEnum.class),</span><br><span class="line">  <span class="meta">@Result</span>(property = <span class="string">"nickName"</span>, column = <span class="string">"nick_name"</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="function">UserEntity <span class="title">getOne</span><span class="params">(@Param(<span class="string">"tablename"</span>)</span> String tableName, @<span class="title">Param</span><span class="params">(<span class="string">"id"</span>)</span>Long id)</span>;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Insert</span>(<span class="string">"INSERT INTO users(userName,passWord,user_sex) VALUES(#&#123;userName&#125;, #&#123;passWord&#125;, #&#123;userSex&#125;)"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(UserEntity user)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Update</span>(<span class="string">"UPDATE users SET userName=#&#123;userName&#125;,nick_name=#&#123;nickName&#125; WHERE id =#&#123;id&#125;"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(UserEntity user)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Delete</span>(<span class="string">"DELETE FROM users WHERE id =#&#123;id&#125;"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">batchInset注解方式</span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"&lt;script&gt;"</span>+</span><br><span class="line">            <span class="string">"insert into table(column1, column3, column2) "</span></span><br><span class="line">            + <span class="string">"values "</span></span><br><span class="line">            + <span class="string">"&lt;foreach collection =\"useridList\" item=\"userid\" index= \"index\" separator =\",\"&gt; "</span></span><br><span class="line">            + <span class="string">"(#&#123;userid&#125;,#&#123;message.title&#125;,#&#123;message.content&#125;,#&#123;message.type&#125;,0,0,NOW()) "</span></span><br><span class="line">            + <span class="string">"&lt;/foreach &gt; "</span></span><br><span class="line">            + <span class="string">"&lt;/script&gt;"</span>)</span><br><span class="line"></span><br><span class="line">动态SQL</span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"&lt;script&gt;"</span>+</span><br><span class="line">            <span class="string">"select id,coinType,coinName,LOWER(contractAddress) as contractAddress,tokenDecimals,currentBlockHeight,currentBalance,status"</span> +</span><br><span class="line">            <span class="string">" from tab_coin_list where 1=1"</span> +</span><br><span class="line">            <span class="string">" &lt;if test=\"name != null and name != ''\"&gt; and \"(coinType like \"%\"#&#123;name&#125;\"%\"  or coinName like \"%\"#&#123;name&#125;\"%\")\"&lt;/if&gt;"</span> +</span><br><span class="line">     <span class="string">" &lt;/script&gt;"</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mybatis like 模糊查询</span><br><span class="line">--all 用$不能防sql注入  </span><br><span class="line">select * from user where name like &apos;%$&#123;name&#125;%&apos;  </span><br><span class="line">  </span><br><span class="line">--mysql,oracle （db2的concat函数只支持2个参数）  </span><br><span class="line">select * from user where name like concat(&apos;%&apos;,#&#123;name&#125;,&apos;%&apos;)   </span><br><span class="line">  </span><br><span class="line">--oracle,db2  </span><br><span class="line">select * from user where name like &apos;%&apos;||#&#123;name&#125;||&apos;%&apos; （sqllite中可用）</span><br><span class="line">@Select(&quot;&lt;script&gt;&quot;+</span><br><span class="line">            &quot;select id,coinType,coinName,LOWER(contractAddress) as contractAddress,tokenDecimals,currentBlockHeight,currentBalance,status&quot; +</span><br><span class="line">            &quot; from tab_coin_list &quot; +</span><br><span class="line">            &quot; &lt;if test=\&quot;name != null and name != &apos;&apos;\&quot;&gt;where coinType like \&quot;%\&quot;||#&#123;name&#125;||\&quot;%\&quot; or coinName like \&quot;%\&quot;||#&#123;name&#125;||\&quot;%\&quot; &lt;/if&gt;&quot; +</span><br><span class="line">     &quot; &lt;/script&gt;&quot;)</span><br><span class="line">  </span><br><span class="line">--SQL Server  </span><br><span class="line">select * from user where name like &apos;%&apos;+#&#123;name&#125;+&apos;%&apos;  </span><br><span class="line">  </span><br><span class="line">--据说这种是预编译，有空测下  </span><br><span class="line">select * from user where name like &quot;%&quot;#&#123;name&#125;&quot;%&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//mybatis 分页 依赖</span><br><span class="line">//&lt;dependency&gt;  </span><br><span class="line">//    &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;  </span><br><span class="line">//    &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;  </span><br><span class="line"> //   &lt;version&gt;1.1.1&lt;/version&gt;  </span><br><span class="line">// &lt;/dependency&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Service  </span><br><span class="line">@Transactional  </span><br><span class="line">public class HelloServiceImpl &#123;  </span><br><span class="line">    @Autowired  </span><br><span class="line">    MybatisDao mybatisDao;  </span><br><span class="line">      </span><br><span class="line">    public void find()&#123;    </span><br><span class="line">        //分页插件: 查询第1页，每页10行  </span><br><span class="line">        Page&lt;User&gt; page =PageHelper.startPage(1, 10);    </span><br><span class="line">        mybatisDao.findAll();    </span><br><span class="line">        //数据表的总行数  </span><br><span class="line">        page.getTotal();  </span><br><span class="line">        //分页查询结果的总行数  </span><br><span class="line">        page.size();  </span><br><span class="line">        //第一个User对象，参考list，序号0是第一个元素，依此类推  </span><br><span class="line">        page.get(0);  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   // 执行原理：PageHelper.startPage会拦截下一个sql//，也就是mybatisDao.findAll()的SQL。并且根据当前数据库的语法，把这个SQL改造成一个高性能的分页SQL，同时还会查询该表的总行数，具体可以看SQL日志。</span><br><span class="line">//PageHelper.startPage和mybatisDao.findAll()最好紧跟在一起，中间不要有别的逻辑，否则可能出BUG。</span><br><span class="line">//Page&lt;User&gt; page：相当于一个list集合，findAll()方法查询完成后，会给page对象的相关参数赋值</span><br></pre></td></tr></table></figure><p>为了更接近生产我特地将user_sex、nick_name两个属性在数据库加了下划线和实体类属性名不一致，另外user_sex使用了枚举</p><p>● @Select 是查询类的注解，所有的查询均使用这个</p><p>● @Result 修饰返回的结果集，关联实体类属性和数据库字段一一对应，如果实体类属性和数据库属性名保持一致，就不需要这个属性来修饰。</p><p>● @Insert 插入数据库使用，直接传入实体类会自动解析属性到对应的值</p><p>● @Update 负责修改，也可以直接传入对象</p><p>● @delete 负责删除</p><p>注意，使用#符号和$符号的不同：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// This example creates a prepared statement, something like select * from teacher where name = ?;  // 防sql注入</span><br><span class="line">@Select("Select * from teacher where name = #&#123;name&#125;")</span><br><span class="line">Teacher selectTeachForGivenName(@Param("name") String name);</span><br><span class="line"></span><br><span class="line">// This example creates n inlined statement, something like select * from teacher where name = 'someName';</span><br><span class="line">@Select("Select * from teacher where name = '$&#123;name&#125;'")</span><br><span class="line">Teacher selectTeachForGivenName(@Param("name") String name);</span><br></pre></td></tr></table></figure></p><ol start="4"><li>手動建表</li><li>使用<br>上面三步就基本完成了相关dao层开发，使用的时候当作普通的类注入进入就可以了<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(value = main.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> UserMapper UserMapper;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  UserMapper.insert(<span class="keyword">new</span> UserEntity(<span class="string">"aa"</span>, <span class="string">"a123456"</span>, UserSexEnum.MAN));</span><br><span class="line">  UserMapper.insert(<span class="keyword">new</span> UserEntity(<span class="string">"bb"</span>, <span class="string">"b123456"</span>, UserSexEnum.WOMAN));</span><br><span class="line">  UserMapper.insert(<span class="keyword">new</span> UserEntity(<span class="string">"cc"</span>, <span class="string">"b123456"</span>, UserSexEnum.WOMAN));</span><br><span class="line"></span><br><span class="line">  Assert.assertEquals(<span class="number">3</span>, UserMapper.getAll().size());</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  List&lt;UserEntity&gt; users = UserMapper.getAll();</span><br><span class="line">  System.out.println(users.toString());</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  UserEntity user = UserMapper.getOne(<span class="number">3l</span>);</span><br><span class="line">  System.out.println(user.toString());</span><br><span class="line">  user.setNickName(<span class="string">"neo"</span>);</span><br><span class="line">  UserMapper.update(user);</span><br><span class="line">  Assert.assertTrue((<span class="string">"neo"</span>.equals(UserMapper.getOne(<span class="number">3l</span>).getNickName())));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>极简xml版本<br>极简xml版本保持映射文件的老传统，优化主要体现在不需要实现dao的是实现层，系统会自动根据方法名在映射文件中找对应的sql.</p></blockquote><ol><li>配置<br>pom文件和上个版本一样，只是application.properties新增以下配置<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mybatis.config-locations=classpath:mybatis/mybatis-config.xml</span><br><span class="line">mybatis.mapper-locations=classpath:mybatis/mapper<span class="comment">/*.xml</span></span><br></pre></td></tr></table></figure></li></ol><p>指定了mybatis基础配置文件和实体类映射文件的地址<br>mybatis-config.xml 配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Integer"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Long"</span> <span class="attr">type</span>=<span class="string">"java.lang.Long"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"HashMap"</span> <span class="attr">type</span>=<span class="string">"java.util.HashMap"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"LinkedHashMap"</span>                   <span class="attr">type</span>=<span class="string">"java.util.LinkedHashMap"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"ArrayList"</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">"java.util.ArrayList"</span> /&gt;</span></span><br><span class="line">  </span><br><span class="line">                <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"LinkedList"</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">type</span>=<span class="string">"java.util.LinkedList"</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里也可以添加一些mybatis基础的配置</p><ol start="2"><li>添加User的映射文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.neo.mapper.UserMapper"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.neo.entity.UserEntity"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userName"</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"passWord"</span> <span class="attr">property</span>=<span class="string">"passWord"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_sex"</span> <span class="attr">property</span>=<span class="string">"userSex"</span> <span class="attr">javaType</span>=<span class="string">"com.neo.enums.UserSexEnum"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"nick_name"</span> <span class="attr">property</span>=<span class="string">"nickName"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Base_Column_List"</span> &gt;</span></span><br><span class="line">        id, userName, passWord, user_sex, nick_name</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAll"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>  &gt;</span></span><br><span class="line">       SELECT </span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></span><br><span class="line">    FROM users</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getOne"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Long"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span> &gt;</span></span><br><span class="line">        SELECT </span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></span><br><span class="line">    FROM users</span><br><span class="line">    WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"com.neo.entity.UserEntity"</span> &gt;</span></span><br><span class="line">       INSERT INTO </span><br><span class="line">         users</span><br><span class="line">         (userName,passWord,user_sex) </span><br><span class="line">        VALUES</span><br><span class="line">         (#&#123;userName&#125;, #&#123;passWord&#125;, #&#123;userSex&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.neo.entity.UserEntity"</span> &gt;</span></span><br><span class="line">       UPDATE </span><br><span class="line">         users </span><br><span class="line">       SET </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userName != null"</span>&gt;</span>userName = #&#123;userName&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"passWord != null"</span>&gt;</span>passWord = #&#123;passWord&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        nick_name = #&#123;nickName&#125;</span><br><span class="line">       WHERE </span><br><span class="line">         id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Long"</span> &gt;</span></span><br><span class="line">       DELETE FROM</span><br><span class="line">          users </span><br><span class="line">       WHERE </span><br><span class="line">          id =#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>其实就是把上个版本中mapper的sql搬到了这里的xml中了</p><ol start="3"><li>编写Dao层的代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> <span class="function">List&lt;UserEntity&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"> <span class="function">UserEntity <span class="title">getOne</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(UserEntity user)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(UserEntity user)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>对比上一步这里全部只剩了接口方法</p><ol start="4"><li>使用</li></ol><p>使用和上个版本没有任何区别，大家就看代码吧</p><blockquote><p>如何选择</p></blockquote><p>两种模式各有特点，注解版适合简单快速的模式，其实像现在流行的这种微服务模式，一个微服务就会对应一个自已的数据库，多表连接查询的需求会大大的降低，会越来越适合这种模式。<br>老传统模式比适合大型项目，可以灵活的动态生成SQL，方便调整SQL，也有痛痛快快，洋洋洒洒的写SQL的感觉。</p><hr><blockquote><p>字符串与16进制互转</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toHexString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> ch = (<span class="keyword">int</span>) s.charAt(i);</span><br><span class="line">            String s4 = Integer.toHexString(ch);</span><br><span class="line">            str = str + s4;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 转化十六进制编码为字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toStringHex1</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] baKeyword = <span class="keyword">new</span> <span class="keyword">byte</span>[s.length() / <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; baKeyword.length; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                baKeyword[i] = (<span class="keyword">byte</span>) (<span class="number">0xff</span> &amp; Integer.parseInt(s.substring(</span><br><span class="line">                        i * <span class="number">2</span>, i * <span class="number">2</span> + <span class="number">2</span>), <span class="number">16</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            s = <span class="keyword">new</span> String(baKeyword, <span class="string">"utf-8"</span>);<span class="comment">// UTF-16le:Not</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 转化十六进制编码为字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toStringHex2</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] baKeyword = <span class="keyword">new</span> <span class="keyword">byte</span>[s.length() / <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; baKeyword.length; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                baKeyword[i] = (<span class="keyword">byte</span>) (<span class="number">0xff</span> &amp; Integer.parseInt(s.substring(</span><br><span class="line">                        i * <span class="number">2</span>, i * <span class="number">2</span> + <span class="number">2</span>), <span class="number">16</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            s = <span class="keyword">new</span> String(baKeyword, <span class="string">"utf-8"</span>);<span class="comment">// UTF-16le:Not</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 16进制数字字符集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String hexString = <span class="string">"0123456789ABCDEF"</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 将字符串编码成16进制数字,适用于所有字符（包括中文）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据默认编码获取字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = str.getBytes();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(bytes.length * <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 将字节数组中每个字节拆解成2位16进制整数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">            sb.append(hexString.charAt((bytes[i] &amp; <span class="number">0xf0</span>) &gt;&gt; <span class="number">4</span>));</span><br><span class="line">            sb.append(hexString.charAt((bytes[i] &amp; <span class="number">0x0f</span>) &gt;&gt; <span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 将16进制数字解码成字符串,适用于所有字符（包括中文）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decode</span><span class="params">(String bytes)</span> </span>&#123;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream(</span><br><span class="line">                bytes.length() / <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 将每2位16进制整数组装成一个字节</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length(); i += <span class="number">2</span>)</span><br><span class="line">            baos.write((hexString.indexOf(bytes.charAt(i)) &lt;&lt; <span class="number">4</span> | hexString</span><br><span class="line">                    .indexOf(bytes.charAt(i + <span class="number">1</span>))));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(baos.toByteArray());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// System.out.println(encode("中文"));</span></span><br><span class="line">      <span class="comment">//  System.out.println(decode(encode("中文")));</span></span><br><span class="line">        System.out.println(encode(</span><br><span class="line">                <span class="string">"EOS51cNL8NbNygP8hyj4jg7Q8Dxw8PZCMwSpvtmbbdTxqenGQSdMq"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二种方法：</span></span><br><span class="line"><span class="comment">// 将指定byte数组以16进制的形式打印到控制台</span></span><br><span class="line"><span class="comment">// 复制代码 代码如下:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>java Time包</p></blockquote><ul><li><p>JAVA 8 引入新时间API原因是原来的Date类无法支持多线程操作，新时间API支持多线程操作，当java.time包内时间类其值发生改变时，其如同String类，类的实例是不可变的对象，当改变其值的时候就会新生成对象地址，从而改变其对象地址，以保证支持多线程操作。</p></li><li><p>新的java.time包内类默认均采用ISO-8601时区标准</p></li></ul><blockquote><p>&lt;给计算机看的时间&gt; </p><ul><li>Instant 时间戳 在时间线上的瞬间点 在ISO- 2007-12-03T10:15:30<br>-&gt; 2007-12-03T10:15:30 .000Z。<br>&lt;自己使用的日期时间&gt; </li><li>LocalDate 在ISO- 2007-12-03 -&gt; 2007-12-03 。 </li><li>LocalDateTime 在ISO- 2007-12-03T10:15:30 -&gt; 2007-12-03T10:15:30 。 </li><li>LocalTime 在ISO- 10:15:30 -&gt; 10:15:30 。</li></ul></blockquote><blockquote><p>Duration 和Period </p><ul><li>Duration:用于计算两个“时间”间隔 </li><li>Period:用于计算两个“日期”间隔<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java8.time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.Period;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算时间差</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Instant time1 = Instant.now(); <span class="comment">// 获取系统当前</span></span><br><span class="line">        System.out.println(time1);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Instant time2 = Instant.now();<span class="comment">// 获取休眠后系统时间</span></span><br><span class="line">        Duration duration = Duration.between(time1, time2);</span><br><span class="line">        <span class="comment">// 计算两个时间的差值</span></span><br><span class="line">        System.out.println(duration.toMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocalDateTime time1 = LocalDateTime.now();</span><br><span class="line">        System.out.println(time1);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        LocalDateTime time2 = LocalDateTime.now();</span><br><span class="line">        Duration duration = Duration.between(time1, time2);</span><br><span class="line">        System.out.println(duration.toMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 计算两日期相差时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocalDate date1 = LocalDate.now();</span><br><span class="line">        LocalDate date2 = date1.plusDays(<span class="number">5</span>);</span><br><span class="line">        Period period = Period.between(date1, date2);</span><br><span class="line">        System.out.println(period.getDays());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 输入指定日期 按照指定日期格式输出 默认采用ISO-8601日历系统</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocalDateTime time = LocalDateTime.of(<span class="number">1997</span>, <span class="number">06</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">59</span>, <span class="number">0</span>);</span><br><span class="line">        time = time.plusMinutes(<span class="number">1</span>);</span><br><span class="line">        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd : hh:mm:ss"</span>);</span><br><span class="line">        String formatTime = formatter.format(time);</span><br><span class="line">        System.out.println(formatTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 修改默认日期格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取所有日期格式</span></span><br><span class="line">        Set&lt;String&gt; set = ZoneId.getAvailableZoneIds();</span><br><span class="line">        <span class="comment">// 获取所有亚洲国家时区</span></span><br><span class="line">        set.stream().filter(e -&gt; e.startsWith(<span class="string">"Asia"</span>)).forEach(System.out::println);</span><br><span class="line">        LocalDateTime time = LocalDateTime.now(ZoneId.of(<span class="string">"Asia/Hong_Kong"</span>));</span><br><span class="line">        <span class="comment">// format 第二个参数 指定国家</span></span><br><span class="line">        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd : hh:mm:ss"</span>, Locale.CHINA);</span><br><span class="line">        System.out.println(formatter.format(time));</span><br><span class="line">        System.out.println(time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><hr><blockquote><p>将多个子工程打进一个可运行的jar包</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Build an executable JAR --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span> //指定main方法</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            // 将多个jar打进一个jar中</span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- put your configurations here --&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>使用 JSON output 作为 toString() 的默认输出</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Gson().toJson(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. Reflections (Apache library)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">JSON based <span class="title">implementation</span> <span class="params">(GSON, Jackson libraries)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// GSON library for JSON</span></span></span><br><span class="line"><span class="function">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> com.google.gson.Gson().toJson(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Jackson libabry for JSON/YAML</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> com.fasterxml.jackson.databind.ObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(<span class="keyword">this</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (com.fasterxml.jackson.core.JsonProcessingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2</span>. ToStringBuilder (available with apache-commons library)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> org.apache.commons.lang3.builder.ToStringBuilder(<span class="keyword">this</span>).</span><br><span class="line">        append(<span class="string">"field1"</span>, field1).</span><br><span class="line">        append(<span class="string">"field2"</span>, field2).</span><br><span class="line">        toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3</span>. Hard-<span class="function">core <span class="title">toString</span><span class="params">()</span> implementation</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> StringBuilder()</span><br><span class="line">        .append(<span class="string">"field1:"</span>+field1)</span><br><span class="line">        .append(<span class="string">"field2:"</span>+field2)</span><br><span class="line">        .toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>使用BlockingQueue的关键技术点如下</p></blockquote><ul><li>BlockingQueue定义的常用方法如下:</li></ul><ol><li><p>==add(anObject)==:把anObject加到BlockingQueue里,即如果BlockingQueue可以容纳,则返回true,否则==抛出异常==</p></li><li><p>==offer(anObject)==:表示如果可能的话,将anObject加到BlockingQueue里,即如果BlockingQueue可以容纳,则返回true,否则返回==false==.</p></li><li><p>==put(anObject)==:把anObject加到BlockingQueue里,如果BlockQueue没有空间,则调用此方法的线程被==阻塞==直到BlockingQueue里面有空间再继续.</p></li><li><p>==poll(time)==:取走BlockingQueue里排在首位的对象,若不能立即取出,则可以等time参数规定的时间,取不到时返回null</p></li><li><p>==take()==:取走BlockingQueue里排在首位的对象,若BlockingQueue为空,==阻塞==进入等待状态直到Blocking有新的对象被加入为止</p></li></ol><ul><li><p>BlockingQueue有5个具体的实现类,根据不同需求,选择不同的实现类</p><ul><li><p>==ArrayBlockingQueue==:规定大小的BlockingQueue,其构造函数必须带一个int参数来指明其大小.其所含的对象是以FIFO(先入先出)顺序排序的.==有序固定大小==</p></li><li><p>==LinkedBlockingQueue==:大小不定的BlockingQueue,若其构造函数带一个规定大小的参数,生成的BlockingQueue有大小限制,若不带大小参数,所生成的BlockingQueue的大小由Integer.MAX_VALUE来决定.其所含的对象是以FIFO(先入先出)顺序排序的==有序==</p></li><li><p>==PriorityBlockingQueue==:类似于LinkedBlockQueue,但其所含对象的排序不是FIFO,而是依据对象的自然排序顺序或者是构造函数的Comparator决定的顺序==自定义排序==.</p></li><li><p>==SynchronousQueue==:特殊的BlockingQueue,对其的操作必须是==放和取交替完成的==.</p></li><li>==DelayQueue== : Delayed 元素的一个无界阻塞队列，只有在延迟期满时才能从中提取元素。该队列的头部 是延迟期满后保存时间最长的 Delayed 元素。如果延迟都还没有期满，则队列没有头部，并且 poll 将返回 null。当一个元素的getDelay(TimeUnit.NANOSECONDS) 方法返回一个小于或等于零的值时，则出现期满。此队列不允许使用 null 元素</li></ul></li><li>LinkedBlockingQueue和ArrayBlockingQueue比较起来,它们背后所用的数据结构不一样,导致LinkedBlockingQueue的数据吞吐量要大于ArrayBlockingQueue,但在线程数量很大时其性能的可预见性低于ArrayBlockingQueue.  </li></ul><hr><blockquote><p>SpringBot 注解 <code>CommandLineRunner、ApplicationRunner 接口是在容器启动成功后的最后一步回调（类似开机自启动）</code></p></blockquote><hr><blockquote><p>java 内部类 </p><ul><li>分类<ul><li>静态内部类</li></ul></li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 静态内部类不持有外部类的引用</span><br><span class="line">2. 静态内部类不依赖外部类 </span><br><span class="line"></span><br><span class="line"># 在普通内部类中，我们可以直接访问外部类的属性、方法，即使是private类型也可以访问，这是因为内部类持有一个外部类的引用，可以自由访问。而静态内部类，则只可以访问外部类的静态方法和静态属性（如果是private权限也能访问，这是由其代码位置所决定的），其他则不能访问</span><br></pre></td></tr></table></figure><ul><li><ul><li>普通内部类<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 普通内部类不能声明static的方法和变量</span><br><span class="line"></span><br><span class="line"># 普通内部类不能声明static的方法和变量，注意这里说的是变量，常量（也就是final static修饰的属性）还是可以的，而静态内部类形似外部类，没有任何限制。</span><br></pre></td></tr></table></figure></li></ul></li><li><p>作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.内部类可以很好的实现隐藏</span><br><span class="line"></span><br><span class="line">2．内部类拥有外围类的所有元素的访问权限</span><br><span class="line"></span><br><span class="line">3.可是实现多重继承</span><br><span class="line"></span><br><span class="line">4.可以避免修改接口而实现同一个类中两种同名方法的调用</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>maven 依赖传递问题</p></blockquote><ul><li>找出传递以来的所在 <code>mvn dependency:tree -Dverbose -Dincludes=依赖的工程名:具体引发问题的包</code> </li><li>裁剪传递 <code>&lt;exclusion&gt;</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.unitils&lt;/groupId&gt;  </span><br><span class="line">    &lt;artifactId&gt;unitils-dbmaintainer&lt;/artifactId&gt;  </span><br><span class="line">    &lt;version&gt;$&#123;unitils.version&#125;&lt;/version&gt;  </span><br><span class="line">    &lt;exclusions&gt;  </span><br><span class="line">        &lt;exclusion&gt;  </span><br><span class="line">            &lt;artifactId&gt;dbunit&lt;/artifactId&gt;  </span><br><span class="line">            &lt;groupId&gt;org.dbunit&lt;/groupId&gt;  </span><br><span class="line">        &lt;/exclusion&gt;  </span><br><span class="line">        &lt;!-- 这个就是我们要加的片断 --&gt;  </span><br><span class="line">        &lt;exclusion&gt;  </span><br><span class="line">            &lt;artifactId&gt;asm&lt;/artifactId&gt;  </span><br><span class="line">            &lt;groupId&gt;asm&lt;/groupId&gt;  </span><br><span class="line">        &lt;/exclusion&gt;  </span><br><span class="line">    &lt;/exclusions&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">== vs equals</span><br><span class="line">1. 是判断两个变量或实例是不是指向同一个内存空间    equals是判断两个变量或实例所指向的内存空间的值是不是相同 </span><br><span class="line">2. 是指对内存地址进行比较    equals()是对字符串的内容进行比较</span><br><span class="line">3. 指引用是否相同    equals()指的是值是否相同</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Go</title>
      <link href="/2018/10/17/Go/"/>
      <url>/2018/10/17/Go/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>EOS</title>
      <link href="/2018/10/17/EOS/"/>
      <url>/2018/10/17/EOS/</url>
      
        <content type="html"><![CDATA[<h4 id="EOS安装使用中常见的问题"><a href="#EOS安装使用中常见的问题" class="headerlink" title="EOS安装使用中常见的问题"></a>EOS安装使用中常见的问题</h4><h5 id="一些闲话"><a href="#一些闲话" class="headerlink" title="一些闲话"></a>一些闲话</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EOS 由于其区块链行业的明星项目，ico阶段就得到了很多人的追捧完成了40多亿美元的资金。终于在今年6月份主网才磕磕绊绊的上线了，但是它并没有达到人们的预期，可用性，安全性方面都被人吐槽。用起来很蛋疼，但是没办法，人家有钱呀(有钱就是硬气)，还得硬着头皮去研究。</span><br></pre></td></tr></table></figure><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1. git clone https://github.com/eosio/eos --recursive</span><br><span class="line">2. cd eos</span><br><span class="line">3. ./eosio_build.sh</span><br><span class="line">3. cd build</span><br><span class="line">4. sudo make install</span><br><span class="line"></span><br><span class="line">说他坑(安装都得编译源码)大家应该能猜到，安装并不会这么顺利，那我们就来总结一下这些坑</span><br><span class="line">1. #报错：</span><br><span class="line">perl: warning: Setting locale failed.</span><br><span class="line">perl: warning: Please check that your locale settings:</span><br><span class="line">  LANGUAGE = (unset),</span><br><span class="line">  LC_ALL = (unset),</span><br><span class="line">  LC_CTYPE = "UTF-8",</span><br><span class="line">  LANG = "en_US.UTF-8"</span><br><span class="line">    are supported and installed on your system.</span><br><span class="line"><span class="meta"> #</span> 解决方法</span><br><span class="line">export LANGUAGE=en_US.UTF-8</span><br><span class="line">export LC_ALL=en_US.UTF-8</span><br><span class="line">export LANG=en_US.UTF-8</span><br><span class="line">export LC_TYPE=en_US.UTF-8</span><br><span class="line">2. #报错 </span><br><span class="line">locale::facet::_S_create_c_locale name not valid</span><br><span class="line"><span class="meta">#</span> 解决方法</span><br><span class="line">LANG=C 或者 export LC_ALL="en_US.UTF-8"</span><br></pre></td></tr></table></figure><h4 id="初始化系统"><a href="#初始化系统" class="headerlink" title="初始化系统"></a>初始化系统</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. 创建钱包</span><br><span class="line">./cleos wallet create（-n + 钱包名） --to-console(将钱包密码打印到控制台)  //不加 -n 参数创建默认钱包default</span><br><span class="line">2. cleos wallet create_key -n 钱包名  //在指定钱包中创建密钥对，不加-n 在default中创建 == ./cleos create key ./cleos import -n 钱包名称 + 私钥</span><br><span class="line">3. ./cleos create account $&#123;authorizing_account&#125; $&#123;new_account&#125; $&#123;owner_key&#125; $&#123;active_key&#125;  // 在公网中我们无法自己创建账户，需要让其他拥有账户的帮忙创建，账户是全网唯一的，网络中的事务都是通过账户来直接完成的。私有网络中要用内置账户eosio来新建我们的以一个账户，owner_key ，active_key 指的是master和active两个不同权限级别的公玥，可以设置成一样，建议用不同的。</span><br><span class="line">4. 初始化系统合约</span><br><span class="line">./cleos set contract eosio(用户名) ../../contracts/eosio.bios -p eosio@active // 为账户eosio加载位于该路径下的合约 -p 指定该事务由哪组密钥来签署</span><br><span class="line">5. 初始化代币合约</span><br><span class="line">./cleos set contract eosioio.token ../../contracts/eosio.token -p eosio.token@active</span><br><span class="line">6. 发行资产</span><br><span class="line">./cleos push action eosio.token  create '&#123;"issuer":"eosio","maximum_supply":"10000000.0000 EOS"&#125;' -p eosio.token@active // 这一步相当于印钞，还没有流通</span><br><span class="line">7. ./cleos push action eosio.token issue '["liyan","1000.0000 EOS","m"]' -p eosio@active // 该1000个EOS资产已经可以流通了，可用于transfer交易了</span><br><span class="line">8. ./cleos push action eosio.token transfer '["liyan","zzl","250.0000(精度必须带上) EOS","ysq"]' -p liyan@active //账户liyan 给 账户zzl 转了250个EOS "ysq" 相当于你发微信红包时写的备注</span><br></pre></td></tr></table></figure><h5 id="关于EOS的合约"><a href="#关于EOS的合约" class="headerlink" title="关于EOS的合约"></a>关于EOS的合约</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EOS中，有五个基础的智能合约，分别是eosio.bios(系统初始化)、eosio.token(代币合约)、 exchange和eosio.msig(用于多用户签名和用户权限管理)、eosio.system(用户投票、将用户注册成为生产者)，了解即可。</span><br></pre></td></tr></table></figure><h5 id="使用中的坑"><a href="#使用中的坑" class="headerlink" title="使用中的坑"></a>使用中的坑</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">按照惯例，我们安装，初始化好了是不是就可以愉快地玩耍了？？？ 不可能，根本不存在！！！！</span><br><span class="line">1. 最让人头疼的就是 nodeos进程异常终止(断电、强杀等)尤其是主网</span><br><span class="line"># database dirty flag set (likely due to unclean shutdown): replay required</span><br><span class="line">解决方案：</span><br><span class="line">1. 数据量不大，不需要原来数据</span><br><span class="line">$ rm -rf ~/.local/share/eosio/nodeos/data/  // 删除数据目录即 --data-dir 指定的目录</span><br><span class="line">2. 数据量大，重新同步需要大量时间，想重用数据 </span><br><span class="line">$ cd /.local/share/eosio/nodeos/data/;ls blocks //  如果返回空 需要把 /.local/share/eosio/nodeos/data/下的blockXXXX重命名为blocks 然后执行下一步</span><br><span class="line">$ 重启时加上启动命令 --hard-replay-blockchain --replay-blockchain //(速度相当慢，没啥子卵用,v1.4.1会有所改善，wabt替换了默认的汇编解析器）</span><br></pre></td></tr></table></figure><h5 id="实现主网逻辑"><a href="#实现主网逻辑" class="headerlink" title="实现主网逻辑"></a>实现主网逻辑</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1. 修改genesis.json</span><br><span class="line"> &#123;</span><br><span class="line">  "initial_timestamp": "2018-06-08T08:08:08.888",</span><br><span class="line">  "initial_key": "EOS7EarnUhcyYqmdnPon8rm7mBCTnBoot6o7fE2WzjvEX2TdggbL3",</span><br><span class="line">  "initial_configuration": &#123;</span><br><span class="line">    "max_block_net_usage": 1048576,</span><br><span class="line">    "target_block_net_usage_pct": 1000,</span><br><span class="line">    "max_transaction_net_usage": 524288,</span><br><span class="line">    "base_per_transaction_net_usage": 12,</span><br><span class="line">    "net_usage_leeway": 500,</span><br><span class="line">    "context_free_discount_net_usage_num": 20,</span><br><span class="line">    "context_free_discount_net_usage_den": 100,</span><br><span class="line">    "max_block_cpu_usage": 200000,</span><br><span class="line">    "target_block_cpu_usage_pct": 1000,</span><br><span class="line">    "max_transaction_cpu_usage": 150000,</span><br><span class="line">    "min_transaction_cpu_usage": 100,</span><br><span class="line">    "max_transaction_lifetime": 3600,</span><br><span class="line">    "deferred_trx_expiration_window": 600,</span><br><span class="line">    "max_transaction_delay": 3888000,</span><br><span class="line">    "max_inline_action_size": 4096,</span><br><span class="line">    "max_inline_action_depth": 4,</span><br><span class="line">    "max_authority_depth": 6</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">2. 修改config.ini</span><br><span class="line">  1. 修改 chain-state-db-size 1024 --&gt; 4096</span><br><span class="line">  2. 添加bplist:  p2p-peer-address = 159.65.214.150:9876</span><br><span class="line">3. nohup /data/eos/build/programs/nodeos/nodeos --http-server-address 172.31.53.100:8888 --data-dir /data/eos/data --config-dir /data/eos/config --plugin eosio::chain_api_plugin  --plugin eosio::history_api_plugin --plugin eosio::net_api_plugin --filter-on ****:transfer: --filter-on ******:transfer: 1&gt; /data/log/info.out 2&gt; /data/log/error.out &amp;  // --filter-on 用于支持get_actions接口</span><br></pre></td></tr></table></figure><h5 id="私链逻辑"><a href="#私链逻辑" class="headerlink" title="私链逻辑"></a>私链逻辑</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 修改config.ini</span><br><span class="line">  1. enable-stale-production = true</span><br><span class="line">  2. producer-name = eosio</span><br><span class="line">2. 启动命令跟公网类似</span><br><span class="line"></span><br><span class="line">私链初始化时可能遇到的问题</span><br><span class="line"><span class="meta">#</span> Error 3090003: Provided keys, permissions, and delays do not satisfy declared authorizations</span><br><span class="line"><span class="meta">#</span> 原因 ： 是钱包中没有账户eosio的私钥 </span><br><span class="line"><span class="meta">#</span> 解决办法 ：把eosio的私钥导入到钱包中</span><br><span class="line">./cleos wallet import --private-key ....</span><br></pre></td></tr></table></figure><h5 id="敲黑板"><a href="#敲黑板" class="headerlink" title="敲黑板"></a>敲黑板</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一定要用pkill 来终止进程，否则重放数据会消耗大量时间</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EOS </tag>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ethereum</title>
      <link href="/2018/10/17/ethereum/"/>
      <url>/2018/10/17/ethereum/</url>
      
        <content type="html"><![CDATA[<blockquote><p>试例程序</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">const</span> Web3 = <span class="built_in">require</span>(<span class="string">'web3'</span>);</span><br><span class="line"><span class="keyword">const</span> Tx = <span class="built_in">require</span>(<span class="string">'ethereumjs-tx'</span>);</span><br><span class="line"><span class="keyword">const</span> web3Admin = <span class="built_in">require</span>(<span class="string">'web3admin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// set the provider you want from Web3.providers</span></span><br><span class="line"><span class="keyword">var</span>  web3 = <span class="keyword">new</span> Web3(<span class="keyword">new</span> Web3.providers.HttpProvider(<span class="string">"http://192.168.112.66:8676"</span>));</span><br><span class="line"><span class="comment">//获取合约的接口ABI文件</span></span><br><span class="line"><span class="keyword">var</span> abi = <span class="built_in">JSON</span>.parse(<span class="string">'[]'</span>);</span><br><span class="line"><span class="comment">// 合约地址</span></span><br><span class="line"><span class="keyword">var</span> address = <span class="string">'0x57eb83c23e15530cdfc8d0c0a96337743a5085b8'</span>;</span><br><span class="line"><span class="comment">// 默认账户 当没有设置more账户时，发送交易不写from会报错。</span></span><br><span class="line"><span class="keyword">var</span> coinbase = web3.eth.defaultAccount;</span><br><span class="line"><span class="comment">// 获取合约实例</span></span><br><span class="line"><span class="keyword">var</span> contract = web3.eth.contract(abi);</span><br><span class="line"><span class="keyword">var</span> ContractInstance = contract.at(address);</span><br><span class="line"><span class="comment">// 获取事件</span></span><br><span class="line"><span class="keyword">var</span> event = ContractInstance.Transfer();</span><br><span class="line"><span class="comment">//var TokenName = ContractInstance.name();</span></span><br><span class="line"><span class="comment">// 产生合约实例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newContract</span>(<span class="params">abi,address</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> abi = <span class="built_in">JSON</span>.parse(abi);</span><br><span class="line">    <span class="keyword">var</span> address = address;</span><br><span class="line">    <span class="keyword">var</span> contractIns = web3.eth.contract(abi).at(address);</span><br><span class="line">    <span class="keyword">return</span> contractIns;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取事件对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newEvent</span>(<span class="params">contractIns,eventFun</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> event = contractIns.eventFun();</span><br><span class="line">    <span class="keyword">return</span> event;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 转账</span></span><br><span class="line"><span class="comment">/*function transfer(_to,_amount,_from,psd) &#123;</span></span><br><span class="line"><span class="comment">    // var _to = douncment.getElenmentById('').value;</span></span><br><span class="line"><span class="comment">    // var amount = douncment.getElenmentById('').value;</span></span><br><span class="line"><span class="comment">    // var _from = douncment.getElenmentById('').value;</span></span><br><span class="line"><span class="comment">    // var psd = douncment.getElenmentById('').value;</span></span><br><span class="line"><span class="comment">    if(unLockAccount(_from,psd,200))&#123;</span></span><br><span class="line"><span class="comment">        if(ContractInstance.balanceOf(_from) &gt;= _amount &amp;&amp; getbalance(_from) &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">      bool =  ContractInstance.transfer(_to,_amount,&#123;from:_from&#125;);</span></span><br><span class="line"><span class="comment">      if (!bool)&#123;</span></span><br><span class="line"><span class="comment">          console.log('shibai')</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">        &#125;else&#123;</span></span><br><span class="line"><span class="comment">            console.log('余额不足')</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">  &#125;else &#123;</span></span><br><span class="line"><span class="comment">        console.log('解锁失败')</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getbalance</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> balance = (web3.eth.getBalance(addr)).toNumber();</span><br><span class="line">    <span class="keyword">return</span> balance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getcoinbase</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> web3.eth.coinbase;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setDefaultAccount</span>(<span class="params">addr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  web3.eth.defaultAccount = addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unLockAccount</span>(<span class="params">addr,psd,time</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> web3.personal.unlockAccount(addr,psd,time);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">balanceOf</span>(<span class="params">contact,addr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span>  contact.balanceOf(addr).toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wait_while</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    web3Admin.extend(web3);</span><br><span class="line">    <span class="keyword">var</span>   pending = web3.txpool.status.pending;</span><br><span class="line">    <span class="built_in">console</span>.log(pending);</span><br><span class="line">    <span class="keyword">while</span> (pending != <span class="number">0</span>) &#123;</span><br><span class="line">        web3.miner.start();</span><br><span class="line">        pending = web3.txpool.status.pending;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    web3.miner.stop();</span><br><span class="line">  <span class="comment">//  console.log(web3.eth.getTransactionReceipt('0x0feee17c61d04f3a6c14e8c583fd50a62690cac446cb760e0708bd95f60eb81e'));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    web3.eth.sendTransaction(&#123;<span class="attr">from</span>:web3.eth.accounts[<span class="number">0</span>],<span class="attr">to</span>:web3.eth.accounts[<span class="number">1</span>],<span class="attr">value</span>:<span class="number">12000</span>&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err,result</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//  wait_while();</span></span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"error"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;<span class="built_in">console</span>.log(web3.eth.getTransaction(result))&#125;</span><br><span class="line">            ,<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">transfer();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*function gas() &#123;</span></span><br><span class="line"><span class="comment">    web3.eth.estimateGas(&#123;</span></span><br><span class="line"><span class="comment">        to: "0x57eb83c23e15530cdfc8d0c0a96337743a5085b8",</span></span><br><span class="line"><span class="comment">        data: "0xc6888fa10000000000000000000000000000000000000000000000000000000000000003"</span></span><br><span class="line"><span class="comment">    &#125;).then(console.log);</span></span><br><span class="line"><span class="comment">// "0x0000000000000000000000000000000000000000000000000000000000000015"</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">// gas();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">function sum(arr) &#123;</span></span><br><span class="line"><span class="comment">    return arr.reduce((x, y) =&gt;</span></span><br><span class="line"><span class="comment">    &#123;return x + y&#125;</span></span><br><span class="line"><span class="comment">    )</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">console.log(getcoinbase());</span></span><br><span class="line"><span class="comment">console.log(getbalance(web3.eth.accounts[0]));</span></span><br><span class="line"><span class="comment">console.log(getbalance(web3.eth.accounts[2]));</span></span><br><span class="line"><span class="comment">console.log(balanceOf(ContractInstance,web3.eth.accounts[2]));</span></span><br><span class="line"><span class="comment">transfer(web3.eth.accounts[2],1,web3.eth.accounts[0],"");</span></span><br><span class="line"><span class="comment">wait_while();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*event.watch(function(error,result) &#123;</span></span><br><span class="line"><span class="comment">    if (error) &#123;</span></span><br><span class="line"><span class="comment">        console.log('出错了')</span></span><br><span class="line"><span class="comment">    &#125; else &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        console.log(balanceOf(ContractInstance, web3.eth.accounts[2]));</span></span><br><span class="line"><span class="comment">      //  console.log(balanceOf(ContractInstance, '0x00022cf5af8fa7c7999e41069cf956097ee71926'));</span></span><br><span class="line"><span class="comment">        console.log('从地址：' + '-----'+result.args.from + '转到地址:'+ '===' + result.args.to + '--------' +</span></span><br><span class="line"><span class="comment">            '代币:' + TokenName + '------' +</span></span><br><span class="line"><span class="comment">            result.args.value.toNumber() + '----' + result.transactionHash);</span></span><br><span class="line"><span class="comment">        console.log(JSON.stringify(result));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          /!*web3.eth.getTransactionReceipt('0x38e5fdca6666a810f31fddb4aefee565b964459f085e2cb1870dd44cc90edc36',function (err,result) &#123;</span></span><br><span class="line"><span class="comment">               if (err) &#123;</span></span><br><span class="line"><span class="comment">                   console.log("获取收据失败！！！！！！")</span></span><br><span class="line"><span class="comment">               &#125; else &#123;</span></span><br><span class="line"><span class="comment">                   console.log();</span></span><br><span class="line"><span class="comment">               &#125;</span></span><br><span class="line"><span class="comment">           &#125;)*!/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;)*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*var privateKey = new Buffer('e331b6d69882b4cb4ea581d88e0b604039a3de5967688d3dcffdd2270c0fd109', 'hex')</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">var rawTx = &#123;</span></span><br><span class="line"><span class="comment">    nonce: '0x00',</span></span><br><span class="line"><span class="comment">    gasPrice: '0x09184e72a000',</span></span><br><span class="line"><span class="comment">    gasLimit: '0x2710',</span></span><br><span class="line"><span class="comment">    to: '0x0000000000000000000000000000000000000000',</span></span><br><span class="line"><span class="comment">    value: '0x00',</span></span><br><span class="line"><span class="comment">    data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057'</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">var tx = new Tx(rawTx);</span></span><br><span class="line"><span class="comment">console.log(tx);</span></span><br><span class="line"><span class="comment">tx.sign(privateKey);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">var serializedTx = tx.serialize();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">console.log(serializedTx.toString('hex'));</span></span><br><span class="line"><span class="comment">//f889808609184e72a00082271094000000000000000000000000000000000000000080a47f74657374320000000000000000000000000000000000000000000000000000006000571ca08a8bbf888cfa37bbf0bb965423625641fc956967b81d12e23709cead01446075a01ce999b56a8a88504be365442ea61239198e23d1fce7d00fcfc5cd3b44b7215f</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">web3.eth.sendRawTransaction('0x' + serializedTx.toString('hex'), function(err, hash) &#123;</span></span><br><span class="line"><span class="comment">    if (!err)</span></span><br><span class="line"><span class="comment">        console.log(hash); // "0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385"</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment">var s = "0x7f7465737432000000000000000000000000000000000000000000000000000000600057";</span></span><br><span class="line"><span class="comment">console.log(s.toString('hex'));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">var keythereum = require("keythereum");</span></span><br><span class="line"><span class="comment">var datadir = "./";</span></span><br><span class="line"><span class="comment">把私钥文件放在keystore的文件夹下</span></span><br><span class="line"><span class="comment">datadir = "" // keystore的位置</span></span><br><span class="line"><span class="comment">var address= "0x8708a326d628435a47aefcdcefa3aa2c80b7b75c";</span></span><br><span class="line"><span class="comment">const password = "";</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">var keyObject = keythereum.importFromFile(address, datadir);</span></span><br><span class="line"><span class="comment">var privateKey = keythereum.recover(password, keyObject);</span></span><br><span class="line"><span class="comment">var key = privateKey.toString('hex');</span></span><br><span class="line"><span class="comment">console.log(key);</span></span><br><span class="line"><span class="comment">console.log();*/</span></span><br></pre></td></tr></table></figure><blockquote><p>以太坊 web3 的插件库</p><ul><li><code>npm -g install web3admin</code> geth的rpc默认情况下并不提供miner等接口，需要安装web3admin。</li><li><code>ethereumjs-tx</code> 离线交易签名</li><li><code>keythereum</code> 从<code>json</code>中解出私钥 </li></ul></blockquote><blockquote><p>truffle 相关命令</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">truffle 安装使用</span><br><span class="line">truffle init  不常用了</span><br><span class="line">truffle compile</span><br><span class="line">truffle migrate</span><br><span class="line">truffle unbox react</span><br><span class="line">truffle develop  使用时应该在项目目录下，因为需要读取truffle.js里的配置。</span><br><span class="line">truffle migrate --network live 发布到truffle.js中设置的live网络</span><br><span class="line"></span><br><span class="line">npm run  start</span><br><span class="line">npm  run build</span><br><span class="line">npm run   dev</span><br><span class="line">npm run server  会自动打开浏览器</span><br></pre></td></tr></table></figure><blockquote><p>remix</p><ul><li>remix 中 <code>cmd + /</code> 注释一行</li></ul></blockquote><ul><li><code>npm install remix-ide -g</code> 安装本地remix</li><li><p><code>remix-ide</code> 运行本地remix</p></li><li><p>[ ] 当使用web3Provider模式时不能使用https!!!!!!  <code>https://remix.ethereum.org ----&gt;http://remix.ethereum.org</code></p></li><li style="list-style: none"><input type="checkbox" checked></input> Windows  : 安装本地 remix</li></ul><p><a href="http://remix.ethereum.org/">http://remix.ethereum.org/</a></p><p><a href="https://www.npmjs.com/package/remix-ide">https://www.npmjs.com/package/remix-ide</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install --global --production windows-build-tools //安装依赖</span><br><span class="line"></span><br><span class="line">npm install remix-ide -g //安装 remix</span><br><span class="line"></span><br><span class="line">remix-ide //启动</span><br></pre></td></tr></table></figure></p><ul><li style="list-style: none"><input type="checkbox" checked></input> ==当使用remix连接parity时，发生交易无法被parity收录时，可能的原因是账户没有解锁，<br>当被parity收录，但无法广播到geth时，可能的原因是gasPrice为0；<br>使用parity发送交易时，解锁一次只能发送一笔交易，当连续发送时会出现js客户端一直等待回应而进入一直阻塞的状态。<br>中间涉及到parity客户端一个gasPrice的计算策略问题。总之交易无法广播，无外乎nonce和这总情况。==</li></ul>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> ether </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>命名管道</title>
      <link href="/2018/01/20/namedPipe/"/>
      <url>/2018/01/20/namedPipe/</url>
      
        <content type="html"><![CDATA[<h4 id="命名管道基础"><a href="#命名管道基础" class="headerlink" title="命名管道基础"></a>命名管道基础</h4><blockquote><p>命名管道也被称为FIFO文件， 在文件系统中是可见的，并且跟其它文件一样可以读写！</p></blockquote><ul><li><p>命名管道特点：</p><ul><li>当写进程向管道中写数据的时候，如果没有进程读取这些数据，写进程会堵塞</li><li>当读取管道中的数据的时候，如果没有数据，读取进程会被堵塞</li><li>当写进程堵塞的时候，有读进程读取数据，那么写进程恢复正常</li><li>当读进程堵塞的时候，如果写进程写了数据，那么读进程会读取数据，然后正常执行后面的代码</li></ul></li></ul><h4 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h4><ul><li>创建命名管道 <code>mkfifo /tmp/testpipe</code> 或者 <code>mknod /tmp/testpipe p</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">pipe=/tmp/testpipe</span><br><span class="line"></span><br><span class="line">trap "rm -f $pipe" EXIT</span><br><span class="line"></span><br><span class="line">if [[ ! -p $pipe ]]; then</span><br><span class="line"><span class="meta">#</span>创建命令管道</span><br><span class="line">    mkfifo $pipe</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line"><span class="meta">#</span>从管道里读取一行</span><br><span class="line">    if read line &lt;$pipe; then</span><br><span class="line"><span class="meta">#</span>如果是quit则退出循环</span><br><span class="line">        if [[ "$line" == 'quit' ]]; then</span><br><span class="line">            break</span><br><span class="line">        fi</span><br><span class="line"><span class="meta">#</span>输出读取的数据到屏幕</span><br><span class="line">        echo $line</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo "Reader exiting"</span><br><span class="line">下面是一个writer</span><br><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">pipe=/tmp/testpipe</span><br><span class="line"><span class="meta">#</span>判断管道是否存在</span><br><span class="line">if [[ ! -p $pipe ]]; then</span><br><span class="line">    echo "Reader not running"</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>如果有参数，则将参数写入管道</span><br><span class="line">if [[ "$1" ]]; then</span><br><span class="line">    echo "$1" &gt;$pipe</span><br><span class="line">else</span><br><span class="line"><span class="meta">#</span>否则将当前进程id写入管道</span><br><span class="line">    echo "Hello from $$" &gt;$pipe</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h4><ul><li>文件描述符（缩写fd）在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。每一个unix进程，都会拥有三个标准的文件描述符，来对应三种不同的流 0-标准输入 1-标准输出 2-标准错误</li><li><p>每一个文件描述符会对应一个打开文件，同时，不同的文件描述符也可以对应同一个打开文件；同一个文件可以被不同的进程打开，也可以被同一个进程多次打开。</p></li><li><p><code>ulimit -n</code> 查看系统的可有文件描述符数量</p></li><li><p>命名管道绑定文件描述符 <code>exec 100&lt;&gt;命名管道</code></p></li><li>关闭文件描述符 <code>exec 1000&gt;&amp;-;exec 1000&lt;&amp;-</code></li></ul><blockquote><p>为什么把文件描述符和命名管道绑定 ？？？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">管道的一个重要特性，就是读写必须同时存在，缺失某一个操作，另一个操作就是滞留，绑定文件描述符（读、写绑定）正好解决了这个问题</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>我们都知道shell可以很轻松的实现多线程，但有一个缺陷，不能控制<br>运行在后台的进程数，我们如何来达到目的呢？？<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">答案就是命名管道绑定文件描述符</span><br><span class="line"></span><br><span class="line">看个demo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>！/bin/bash</span><br><span class="line">trap "exec 100&gt;&amp;-;exec 100&lt;&amp;-; exit 0 " 2 // 响应信号 2（ctrl +C）时执行的操作--关闭文件描述符</span><br><span class="line">mkfifo testfifo  // 创建命名管道</span><br><span class="line">exec 100&lt;&gt;testfifo // 将命名管道和文件描述符100绑定</span><br><span class="line">tm -f testfifo  // 删除命名管道</span><br><span class="line">for((i=1;i&lt;=10;i++))</span><br><span class="line">do </span><br><span class="line">    echo &gt;&amp;100  //输入10个空行到文件命名管道，控制并发数</span><br><span class="line">done</span><br><span class="line">start=`date "+%s"`</span><br><span class="line">for((i=1;i&lt;=100;i++))</span><br><span class="line">do</span><br><span class="line">    read -u100  //读一行删除一行</span><br><span class="line">    &#123;</span><br><span class="line">      echo hello$i;sleep2  </span><br><span class="line">    &#125;&amp;</span><br><span class="line">done</span><br><span class="line">wait</span><br><span class="line">end=`date "date "+%s"`</span><br><span class="line">echo "timeused: `expr $end - $start`"</span><br><span class="line">exec 100&gt;&amp;-;exec 100&lt;&amp;-</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> liunx </tag>
            
            <tag> 命名管道 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Shell多线程</title>
      <link href="/2017/10/20/shell/"/>
      <url>/2017/10/20/shell/</url>
      
        <content type="html"><![CDATA[<p>先看一个例子<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line">var start = `date "+%s"`</span><br><span class="line">for((i=1;i&lt;4;i++))</span><br><span class="line">do</span><br><span class="line">    echo "hello world";sleep 2</span><br><span class="line">done</span><br><span class="line">var end =  `date "+%s"`</span><br><span class="line">echo "time : `expr $end - $start`"</span><br><span class="line">------------------</span><br><span class="line">输出如下</span><br><span class="line"><span class="meta">$</span> sh test.sh                             </span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">timeused: 6</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">修改一下上面的例子</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line">var start = `date "+%s"`</span><br><span class="line">for((i=1;i&lt;4;i++))</span><br><span class="line">do</span><br><span class="line">    &#123;</span><br><span class="line">    echo "hello world";sleep 2</span><br><span class="line">    &#125;&amp;</span><br><span class="line">done</span><br><span class="line">wait</span><br><span class="line">var end =  `date "+%s"`</span><br><span class="line">echo "time : `expr $end - $start`"</span><br><span class="line">---------------</span><br><span class="line">执行结果如下</span><br><span class="line"><span class="meta">$</span> sh test.sh                                     </span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">timeused: 2</span><br><span class="line"></span><br><span class="line">// 用“&#123;&#125;”将主执行程序变为一个程序块，用&amp;放入后台</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux</title>
      <link href="/2015/10/17/Linux/"/>
      <url>/2015/10/17/Linux/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><blockquote><p>tldr  <code>npm install -g tldr  相当于 man</code></p></blockquote><blockquote><p>bat    <code>bat --language  高亮的cat</code></p></blockquote><h4 id="命令行基本功"><a href="#命令行基本功" class="headerlink" title="命令行基本功"></a>命令行基本功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//linux 命令行快捷键</span><br><span class="line">Ctrl-A 相当于HOME键，用于将光标定位到本行最前面</span><br><span class="line"></span><br><span class="line">Ctrl-E 相当于End键，即将光标移动到本行末尾</span><br><span class="line"></span><br><span class="line">Ctrl-B 相当于左箭头键，用于将光标向左移动一格</span><br><span class="line"></span><br><span class="line">Ctrl-F 相当于右箭头键，用于将光标向右移动一格</span><br><span class="line"></span><br><span class="line">Ctrl-D 相当于Del键，即删除光标所在处的字符</span><br><span class="line"></span><br><span class="line">Ctrl-K 用于删除从光标处开始到结尾处的所有字符</span><br><span class="line"></span><br><span class="line">Ctrl-L 清屏，相当于clear命令</span><br><span class="line"></span><br><span class="line">Ctrl-R 进入历史命令查找状态，然后你输入几个关键字符，就可以找到你使用过的命令</span><br><span class="line"></span><br><span class="line">Ctrl-U 用于删除从光标开始到行首的所有字符。一般在密码或命令输入错误时常用</span><br><span class="line"></span><br><span class="line">Ctrl-H 删除光标左侧的一个字符</span><br><span class="line"></span><br><span class="line">Ctrl-W 用于删除当前光标左侧的一个单词</span><br><span class="line"></span><br><span class="line">Ctrl-P 相当于上箭头键，即显示上一个命令</span><br><span class="line"></span><br><span class="line">Ctrl-N 相当于下箭头键，即显示下一个命令</span><br><span class="line"></span><br><span class="line">Ctrl-T 用于颠倒光标所在处字符和前一个字符的位置。（目前不知道有什么作用，哪位朋友知道？）</span><br><span class="line"></span><br><span class="line">Ctrl-J 相当于回车键</span><br><span class="line"></span><br><span class="line">Alt-. 用于提取历史命令中的最后一个单词。你先执行history命令，然后再敲击此快捷键若干下，你就懂了！</span><br><span class="line"></span><br><span class="line">Alt-BackSpace 用于删除本行所有的内容，基本上和Ctrl-U类似。</span><br><span class="line"></span><br><span class="line">Alt-C 用于将当前光标处的字符变成大写，同时本光标所在单词的后续字符都变成小写。</span><br><span class="line"></span><br><span class="line">Alt-L 用于将光标所在单词及所在单词的后续字符都变成小写。</span><br><span class="line"></span><br><span class="line">Alt-U 用于将光标所在单词的光标所在处及之后的所有字符变成大写。</span><br></pre></td></tr></table></figure><h4 id="vim-基本功"><a href="#vim-基本功" class="headerlink" title="vim 基本功"></a>vim 基本功</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">vim 快捷键</span><br><span class="line">j下移动</span><br><span class="line">k上移动</span><br><span class="line">0移动到行首</span><br><span class="line">$移动到行末，1$表示当前行的行尾，2$表示当前行的下一行的行尾</span><br><span class="line">b移动到单词的开始</span><br><span class="line">e移动到单词的末尾</span><br><span class="line">G移动到文档最后一行</span><br><span class="line">gg移动到文档第一行</span><br><span class="line">v进入光标模式，配合移动键选中多行</span><br><span class="line">u撤销上一次操作</span><br><span class="line">dw 删除光标所在的单词</span><br><span class="line">dd删除光标当前行</span><br><span class="line">dG删除光标后的全部文字</span><br><span class="line">y复制当前行，会复制换行符</span><br><span class="line">yy复制当前行的内容</span><br><span class="line">yyp复制当前行到下一行，此复制不会放到剪切板中</span><br><span class="line">nyy复制当前开始的n行</span><br><span class="line">p 粘贴</span><br><span class="line">ddp当前行和下一行互换位置(dd删除的内容会保存到粘贴板)</span><br><span class="line">J合并行</span><br><span class="line">ZZ保存离开</span><br><span class="line">*向下查找同样光标的字符</span><br><span class="line">#向上查找同样光标的字符</span><br><span class="line">/code查找 code 一样的内容，向后</span><br><span class="line">?code查找 code 一样的内容，向前</span><br><span class="line">n查找下一处</span><br><span class="line">N查找上一处</span><br><span class="line">ma在光标处做一个名叫a的标记 可用26个标记 (a~z)</span><br><span class="line">`a移动到一个标记a</span><br><span class="line">d`a删除当前位置到标记a之间的内容</span><br><span class="line">:marks查看所有标记</span><br><span class="line"></span><br><span class="line">:w filename  另存为 filename</span><br><span class="line">:jumps历史编辑文档记录</span><br><span class="line">:set nu设置行号显示</span><br><span class="line">:set nonu取消行号显示</span><br><span class="line">:set显示设置参数</span><br><span class="line">:set autoindent自动缩排，回车与第一个非空格符对齐</span><br><span class="line">syntax on/off根据程序语法高亮显示</span><br><span class="line">:set highlight高亮设置查看</span><br><span class="line">:set hlsearch查找代码高亮显示</span><br><span class="line">:nohlsearch暂时关闭高亮显示</span><br><span class="line">:set nohlsearch永久关闭高亮显示</span><br><span class="line">:set bg=dark设置暗色调</span><br><span class="line">:set bg=light设置亮色调</span><br></pre></td></tr></table></figure><h4 id="常用工具安装"><a href="#常用工具安装" class="headerlink" title="常用工具安装"></a>常用工具安装</h4><blockquote><p>cnetos 7安装gcc6+<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install centos-release-scl</span><br><span class="line">sudo yum install devtoolset-7-gcc-c++</span><br><span class="line">echo &apos;source /opt/rh/devtoolset-7/enable&apos; &gt;&gt; ~/.bashrc</span><br><span class="line">which gcc</span><br><span class="line">gcc --version</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>添加SHELL的TAB补全<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Debian/Ubuntu</span><br><span class="line">$ apt-get install bash-completion</span><br><span class="line"></span><br><span class="line">Centos</span><br><span class="line">$ yum install bash-completion</span><br><span class="line"></span><br><span class="line">MAC</span><br><span class="line">$ brew install bash-completion</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>centos7安装alien 转换.deb —&gt;.rpm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. yum install alien</span><br><span class="line">2. alien -r xxx.deb  // 将.deb文件转换为 .rpm</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>sshpass 非交互式密码管理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. sshpass[下载地址](http://sourceforge.net/projects/sshpass/) 下载为一个 tar.gz的压缩包。</span><br><span class="line"></span><br><span class="line">2. tar -zxvf sshpass-1.05.tar.gz</span><br><span class="line"></span><br><span class="line">3. cd sshpass-1.05</span><br><span class="line"></span><br><span class="line">4.  ./configure --prefix=/opt/sshpass #指定安装目录</span><br><span class="line"></span><br><span class="line">5. make</span><br><span class="line"></span><br><span class="line">6. make install</span><br><span class="line"></span><br><span class="line">7.  cp /opt/sshpass/bin/sshpass /usr/bin/ 或者把sshpass加入环境变量</span><br><span class="line">8. 在 iterm2 中加入profile设置 在</span><br><span class="line">`send Text at start` 中加入 `sshpass -p 123456 ssh user@ip`</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>devtoolset <a href="https://www.softwarecollections.org/en/scls/rhscl/devtoolset-7/">安装方法</a>(devtoolset-7 链接)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 1. Install a package with repository for your system:</span><br><span class="line"># On CentOS, install package centos-release-scl available in CentOS repository:</span><br><span class="line"></span><br><span class="line">$ sudo yum install centos-release-scl</span><br><span class="line"></span><br><span class="line"># On RHEL, enable RHSCL repository for you system:</span><br><span class="line"></span><br><span class="line">$ sudo yum-config-manager --enable rhel-server-rhscl-7-rpms</span><br><span class="line"></span><br><span class="line"># 2. Install the collection:</span><br><span class="line"></span><br><span class="line">$ sudo yum install devtoolset-7</span><br><span class="line"></span><br><span class="line"># 3. Start using software collections:</span><br><span class="line">$ scl enable devtoolset-7 bash(临时)</span><br><span class="line">$ echo `source /opt/rh/devtoolset-7/enable` &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>zsh<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">安装</span><br><span class="line">1. brew install zsh</span><br><span class="line">2. sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br><span class="line"></span><br><span class="line">~/.zshrc 加入以下内容</span><br><span class="line">- [高亮设置](https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md) </span><br><span class="line"></span><br><span class="line">1. `git clone https://github.com/zsh-users/zsh-syntax-highlighting.git`</span><br><span class="line"></span><br><span class="line">2. `echo &quot;source $&#123;(q-)PWD&#125;/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot; &gt;&gt; $&#123;ZDOTDIR:-$HOME&#125;/.zshrc`</span><br><span class="line"></span><br><span class="line">3. `source ./zsh-syntax-highlighting/zsh-syntax-highlighting.zsh`</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="进程与网络"><a href="#进程与网络" class="headerlink" title="进程与网络"></a>进程与网络</h4><blockquote><p>lsof<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lsof命令可以列出当前的所有网络情况， 此命令的解释如下：</span><br><span class="line">-n 表示主机以ip地址显示 </span><br><span class="line">-P 表示端口以数字形式显示，默认为端口名称 </span><br><span class="line">-i 意义较多，具体 man lsof, 主要是用来过滤lsof的输出结果 -s 和 -i 配合使用，用于过滤输出</span><br><span class="line">lsof | grep port  :查看占用端口的程序</span><br><span class="line">lsof -i:80  查看占用80端口的进程</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>netstat<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">netstat -antp | grep 端口号(此端口号运行的进程)+ 进程名称(此进程占用的端口号)</span><br><span class="line"></span><br><span class="line">查看连接某服务端口最多的的IP地址 netstat -ntu | grep :80 | awk &apos;&#123;print $5&#125;&apos; | cut -d: -f1 | awk &apos;&#123;++ip[$1]&#125; END &#123;for(i in ip) print ip[i],&quot;\t&quot;,i&#125;&apos; | sort -nr</span><br><span class="line">netstat s |egrep &quot;listen&quot; :查看tcp全连接队列的溢出情况</span><br><span class="line">溢出后，系统如何处理：</span><br><span class="line">cat /proc/sys/net/ipv4/tcp_abort_on_overflow</span><br><span class="line">tcp_abort_on_overflow 为0表示如果三次握手第三步的时候全连接队列满了那么server扔掉client发过来的ack(在server端认为链接还没有建立起来)</span><br><span class="line">为1 表示第三步的时候如果全接队列满了，server发送一个reset包给client，表示废弃这个握手过程</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>nc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nc（netcat）:</span><br><span class="line">- 端口扫描</span><br><span class="line">nc -z -v -n 127.0.0.1 21-25</span><br><span class="line">参数详解： </span><br><span class="line">-z :连接成功后立即关闭连接，不进行数据交换</span><br><span class="line">-v : 详细输出</span><br><span class="line">-n :不使用DNS解析(使用使用域名时，不加该参数</span><br><span class="line">-u : -u参数调整为udp,默认为TCP)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>telnet   <code>telnet ip 空格代替冒号 port</code></p></blockquote><blockquote><p>curl<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -H 'Expect:' -d @aa.txt http://192.168.101.7:52433/com.xxx.api.LoanApplyService:1.0.0/loanApply</span><br><span class="line"> --header 'Expect:'会去掉curl对参数长度1024的限制</span><br><span class="line"> -d@aa.txt  指定使用aa.txt中的内容作为参数</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>ssh <a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">公玥认证</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. ssh-keygen -t rsa</span><br><span class="line">2. ssh user@host 'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys' &lt; ~/.ssh/id_rsa.pub</span><br><span class="line">3. ssh ubuntu@118.89.235.114</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>ssh 私钥登录<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i 私钥文件路径 root@192.168.112.80</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>跨服务器拷贝<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">跨服务器传输文件 SCP</span><br><span class="line">scp [参数] [文件原路径] [目标路径]</span><br><span class="line">- 远程 - 本地  scp root@ip:/path     /localpath</span><br><span class="line"></span><br><span class="line">- 本地 -- 远程 scp localpath   root@ip:/path</span><br><span class="line">rsync</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="shell-技巧"><a href="#shell-技巧" class="headerlink" title="shell 技巧"></a>shell 技巧</h4><blockquote><p>(),(()),[],[[]]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(linux 命令)</span><br><span class="line">  - 得到命令的执行结果，可以作为其他命令的参数 等同于``(反单引号)</span><br><span class="line">  - 命令组 括号中的命令将会新开一个子shell顺序执行，所以括号中的变量不能够被脚本余下的部分使用</span><br><span class="line"></span><br><span class="line">(())</span><br><span class="line">   -用于算数运算符比较   eg: if (($i&lt;5)), 如果不使用双括号, 则为if [ $i -lt 5 ]</span><br><span class="line">[] 相当于test 里面的合法的比较运算符 只有==和！= 不能使用` &gt; &lt; &gt;= &lt;=`</span><br><span class="line">[[]]  没有上面[]的限制</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="程序安装及依赖检测"><a href="#程序安装及依赖检测" class="headerlink" title="程序安装及依赖检测"></a>程序安装及依赖检测</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum -y localinstall xxx.rpm // 安装的同时解决依赖问题</span><br><span class="line"></span><br><span class="line">brew（mac）  yum(linux)  wget(centos)  apt-get(ubantu) </span><br><span class="line">应用下载工具</span><br><span class="line">rpm -ivh 安装</span><br><span class="line">rpm -Uvh 更新</span><br><span class="line">rpm -e  卸载</span><br><span class="line">ldd 程序名称 查看程序的运行依赖</span><br></pre></td></tr></table></figure><h4 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h4><blockquote><p>pv (pipe-view) 查看命令执行的进度<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. 监视打开/拷贝文件进度</span><br><span class="line">pv /media/himanshu/1AC2-A8E3/fNf.mkv &gt; ./Desktop/fnf.mkv</span><br><span class="line">-p 显示进度</span><br><span class="line">-t 显示时间</span><br><span class="line">-n 显示整数百分比</span><br><span class="line">-r 速率</span><br><span class="line">-e 估计剩余的时间</span><br><span class="line">-L 修改传输速率 pv -L 2m /media/himanshu/1AC2-A8E3/fNf.mkv &gt; ./Desktop/fnf.mkv</span><br><span class="line"></span><br><span class="line">2. 监视压缩文件进度</span><br><span class="line">pv /media/himanshu/1AC2-A8E3/fnf.mkv | gzip &gt; ./Desktop/fnf.log.gz</span><br><span class="line"></span><br><span class="line">3. 监视数据内容搜索进度 pv -L 5k pvtest.dat | wc</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">pkill + 进程进程名  按进程名字结束进程(会杀死同名的所有进程) == killall</span><br><span class="line">killall + 进程名称 </span><br><span class="line">查看实时资源占用：top  M(内存倒序) P(CPU倒序)</span><br><span class="line"></span><br><span class="line">ss 显示处于活动状态的套接字信息</span><br><span class="line">ss -lnt : l(listen) n(不解析服务器名称) t(tcp)</span><br><span class="line"></span><br><span class="line">ps aux/-ef |grep   xxx  查看进程信息</span><br><span class="line">ps aux  | grep xxx | grep -v grep |  xargs（将输入转化为后面命令的参数） kill -9  ===   kill -9 ` ps -aux |grep xxx |grep -v grep | awk '&#123;print $2&#125;' `</span><br><span class="line">== kill -9 $(ps -aux |grep xxx |grep -v grep | awk '&#123;print $2&#125;')</span><br><span class="line">grep -v  x'x'x  反选 不包含x'x'x 的结果 </span><br><span class="line">pgrep 通过程序的名字来查询进程</span><br><span class="line">egrep 在指定文件中查找指定字符串</span><br><span class="line">xargs 还有指定参数位置的作用。假设我们要将目录下所有的.py文件放到Python目录中去，可以使用命令</span><br><span class="line">find . -name '*.py' | xargs -I &#123;&#125; mv &#123;&#125; ./Python</span><br><span class="line">参数-I指定了管道前命令作为参数所应该在管道后面命令的位置</span><br><span class="line">find / -name   filename  查看文件路径</span><br><span class="line">tar -cf  压缩</span><br><span class="line">tar -xf 解压</span><br><span class="line">unzip </span><br><span class="line">cd - 返回上次访问的目录</span><br><span class="line">df -h 可以获取硬盘被占用了多少空间，目前还剩下多少空间等信息</span><br><span class="line">du -h 查看指定文件，文件夹所占用的磁盘空间</span><br><span class="line">fdisk 分区</span><br><span class="line">后台启动：nohup + 应用启动命令 + &amp;</span><br><span class="line">bg , fg , ctrl +z , jobs</span><br><span class="line">ctrl +z ： 把当前进程挂起</span><br><span class="line">ctrl +c ：结束当前进程 == kill -15</span><br><span class="line">nslookup(host) - 域名与ip互查</span><br><span class="line">init 6 重启</span><br><span class="line">uptime 查看系统负载时间</span><br><span class="line">ipcs 进程间通信信息</span><br></pre></td></tr></table></figure><blockquote><p>iterm2 使用rz(下载) sz（上传）</p></blockquote><ol><li><code>brew install lrzsz</code></li><li><code>cd ／usr/local/bin</code></li><li><code>sudo wget https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-send-zmodem.sh</code></li></ol><p><code>sudo wget https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-recv-zmodem.sh</code></p><p><code>sudo chmod 777 /usr/local/bin/iterm2-*</code></p><ol start="4"><li>添加触发器</li></ol><p>打开<code>Item2</code>，点击<code>preferences</code> → <code>profiles</code>，选择某个<code>profile</code>，如Default，之后继续选择<code>advanced</code> → <code>triggers</code>，添加编辑添加如下<code>triggers</code>：</p><ul><li><code>rz waiting to receive.</code> 可以不加</li></ul><table><thead><tr><th>Regular Expression</th><th>Action</th><th>Parameters</th></tr></thead><tbody><tr><td>rz waiting to receive.\<em>\</em>B0100</td><td>Run Silent Coprocess</td><td>/usr/local/bin/iterm2-send-zmodem.sh</td></tr><tr><td> \<em>\</em>B00000000000000</td><td>Run Silent Coprocess</td><td>/usr/local/bin/iterm2-recv-zmodem.sh</td></tr></tbody></table><blockquote><p>终端输出颜色<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\033[字背景颜色;字体颜色m字符串\033[0m</span><br><span class="line">字体背景色数值 40 - 49（可省略）</span><br><span class="line">字体颜色数值 30 - 39</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>32位 vs 64 位</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 32位操作系统针对的32位的CPU设计。</span><br><span class="line">2. 64位操作系统针对的64位的CPU设计。</span><br><span class="line">3. 32位的CPU一次(可能包含多个指令)只能处理32位的数据(即4个字节称为一个机器字)</span><br><span class="line">4. 同理，64位CPU一次能处理64的数据(即8个字节的数据)</span><br><span class="line">5. 所以32位的一个机器字位4个字节，64位的一个机器字位8个字节</span><br></pre></td></tr></table></figure><h4 id="防火墙相关"><a href="#防火墙相关" class="headerlink" title="防火墙相关"></a>防火墙相关</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --state '查看防火墙状态'</span><br><span class="line">systemctl status firewalld.service</span><br><span class="line">systemctl stop firewalld.service #停止firewall</span><br><span class="line">systemctl disable firewalld.service #禁止firewall开机启动</span><br><span class="line">iptables服务命令</span><br><span class="line">-- 启动服务</span><br><span class="line"><span class="meta">#</span> /etc/init.d/iptables start </span><br><span class="line"><span class="meta">#</span> service iptables start</span><br><span class="line"></span><br><span class="line">-- 停止服务</span><br><span class="line"><span class="meta">#</span> /etc/init.d/iptables stop</span><br><span class="line"><span class="meta">#</span> service iptables stop</span><br><span class="line"></span><br><span class="line">-- 重启服务</span><br><span class="line"><span class="meta">#</span> /etc/init.d/iptables restart</span><br><span class="line"><span class="meta">#</span> service iptables restart</span><br><span class="line"></span><br><span class="line">-- 保存设置</span><br><span class="line"><span class="meta">#</span> /etc/init.d/iptables save</span><br><span class="line"><span class="meta">#</span> service iptables save</span><br><span class="line"></span><br><span class="line">2. 配置Filter表防火墙</span><br><span class="line">  1. 查看iptables的配置信息</span><br><span class="line"><span class="meta">#</span> iptables -L -n</span><br><span class="line"></span><br><span class="line">  1. 清除原有防火墙规则</span><br><span class="line">   清除预设表filter中的所有规则链的规则</span><br><span class="line"><span class="meta">#</span> iptables -F </span><br><span class="line"></span><br><span class="line">   清除预设表filter中使用者自定链中的规则</span><br><span class="line"><span class="meta">#</span> iptables -X</span><br><span class="line"></span><br><span class="line">   保存防火墙设置</span><br><span class="line"><span class="meta">#</span> /etc/init.d/iptables save</span><br><span class="line">或</span><br><span class="line"><span class="meta">#</span> service iptables save</span><br></pre></td></tr></table></figure><h4 id="防火墙过滤规则"><a href="#防火墙过滤规则" class="headerlink" title="防火墙过滤规则"></a>防火墙过滤规则</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">请求接入包丢弃</span><br><span class="line">[root@home ~]# iptables -p INPUT DROP</span><br><span class="line">接受响应数据包</span><br><span class="line">[root@home ~]# iptables -p OUTPUT ACCEPT</span><br><span class="line">转发数据包丢弃 </span><br><span class="line">[root@home ~]# iptables -p FORWARD DROP</span><br><span class="line"></span><br><span class="line"> 添加防火墙规则</span><br><span class="line"> 首先添加INPUT链,INPUT链的默认规则是DROP,所以我们就写需要ACCETP(通过)的链。</span><br><span class="line">      </span><br><span class="line"> 开启SSH服务端口</span><br><span class="line">[root@tp ~]# iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">[root@tp ~]# iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT </span><br><span class="line"></span><br><span class="line">注:如果在预设设置把OUTPUT设置成DROP策略的话，就需要设置OUTPUT规则，否则无法进行SSH连接。</span><br><span class="line">   开启Web服务端口</span><br><span class="line">[root@tp ~]# iptables -A OUTPUT -p tcp --sport 80 -j ACCEPT</span><br><span class="line">[root@tp ~]# iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line"></span><br><span class="line">   开启邮件服务的25、110端口</span><br><span class="line">[root@tp ~]# iptables -A INPUT -p tcp --dport 110 -j ACCEPT</span><br><span class="line">[root@tp ~]# iptables -A INPUT -p tcp --dport 25 -j ACCEPT</span><br><span class="line"></span><br><span class="line">   开启FTP服务的21端口</span><br><span class="line">[root@tp ~]# iptables -A INPUT -p tcp --dport 21 -j ACCEPT</span><br><span class="line">[root@tp ~]# iptables -A INPUT -p tcp --dport 20 -j ACCEPT</span><br><span class="line"></span><br><span class="line">   开启DNS服务的53端口</span><br><span class="line">[root@tp ~]# iptables -A INPUT -p tcp --dport 53 -j ACCEPT</span><br><span class="line"></span><br><span class="line">   设置icmp服务</span><br><span class="line">[root@tp ~]# iptables -A OUTPUT -p icmp -j ACCEPT (OUTPUT设置成DROP的话)</span><br><span class="line">[root@tp ~]# iptables -A INPUT -p icmp -j ACCEPT    (INPUT设置成DROP的话)</span><br><span class="line"></span><br><span class="line">   允许loopback</span><br><span class="line">不然会导致DNS无法正常关闭等问题</span><br><span class="line">[root@tp ~]# IPTABLES -A INPUT -i lo -p all -j ACCEPT </span><br><span class="line">(如果是INPUT DROP)</span><br><span class="line">[root@tp ~]# IPTABLES -A OUTPUT -o lo -p all -j ACCEPT</span><br><span class="line">(如果是OUTPUT DROP)</span><br><span class="line"></span><br><span class="line">   减少不安全的端口连接</span><br><span class="line">[root@tp ~]# iptables -A OUTPUT -p tcp --sport 31337 -j DROP</span><br><span class="line">[root@tp ~]# iptables -A OUTPUT -p tcp --dport 31337 -j DROP</span><br><span class="line"></span><br><span class="line">说明：有些特洛伊木马会扫描端口31337到31340(即黑客语言中的 elite 端口)上的服务。既然合法服务都不使用这些非标准端口来通信,阻塞这些端口能够有效地减少你的网络上可能被感染的机器和它们的远程主服务器进行独立通信的机会。此外，其他端口也一样,像:31335、27444、27665、20034 NetBus、9704、137-139（smb）,2049(NFS)端口也应被禁止。</span><br><span class="line">   只允许某台主机或某个网段进行SSH连接</span><br><span class="line">只允许192.168.0.3的机器进行SSH连接</span><br><span class="line">[root@tp ~]# iptables -A INPUT -s 192.168.0.3 -p tcp --dport 22 -j ACCEPT</span><br><span class="line"></span><br><span class="line">如果允许或限制一段IP地址可用192.168.0.0/24表示192.168.0.1-255端的所有IP, 24表示子网掩码数。</span><br><span class="line">[root@tp ~]# iptables -A INPUT -s 192.168.0.0/24 -p tcp --dport 22 -j ACCEPT</span><br><span class="line"></span><br><span class="line">注意：指定某个主机或者某个网段进行SSH连接，需要在iptables配置文件中的-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT</span><br><span class="line">删除，因为它表示所有地址都可以登陆.</span><br><span class="line">如果只允许除了192.168.0.3的主机外都能进行SSH连接</span><br><span class="line">[root@tp ~]# iptables -A INPUT -s ! 192.168.0.3 -p tcp --dport 22 -j ACCEPT</span><br><span class="line"></span><br><span class="line">   开启转发功能</span><br><span class="line">在做NAT网络配置时,FORWARD默认规则是DROP时,必须开启数据包转发功能</span><br><span class="line">[root@tp ~]# iptables -A FORWARD -i eth0 -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">[root@tp ~]# iptables -A FORWARD -i eth1 -o eh0 -j ACCEPT</span><br><span class="line"></span><br><span class="line">   丢弃坏的TCP包</span><br><span class="line">[root@tp ~]#iptables -A FORWARD -p TCP ! --syn -m state --state NEW -j DROP</span><br><span class="line"></span><br><span class="line">   处理IP碎片数量，防止DDOS攻击，允许每秒100个</span><br><span class="line">[root@tp ~]#iptables -A FORWARD -f -m limit --limit 100/s --limit-burst 100 -j ACCEPT</span><br><span class="line"></span><br><span class="line">   设置ICMP包过滤, 允许每秒1个包, 限制触发条件是10个包</span><br><span class="line">[root@tp ~]#iptables -A FORWARD -p icmp -m limit --limit 1/s --limit-burst 10 -j ACCEPT</span><br><span class="line"></span><br><span class="line">   DROP非法连接</span><br><span class="line">[root@tp ~]# iptables -A INPUT   -m state --state INVALID -j DROP</span><br><span class="line">[root@tp ~]# iptables -A OUTPUT  -m state --state INVALID -j DROP</span><br><span class="line">[root@tp ~]# iptables -A FORWARD -m state --state INVALID -j DROP</span><br><span class="line"></span><br><span class="line">   允许所有已经建立的和相关的连接</span><br><span class="line">[root@tp ~]# iptables-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">[root@tp ~]# iptables-A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">[root@tp ~]# /etc/rc.d/init.d/iptables save</span><br><span class="line"></span><br><span class="line">3. 配置NAT表防火墙</span><br><span class="line">  1. 查看本机关于NAT的设置情况</span><br><span class="line">[root@tp rc.d]# iptables -t nat -L</span><br><span class="line"></span><br><span class="line">  1. 清除NAT规则</span><br><span class="line">[root@tp ~]# iptables -F -t nat</span><br><span class="line">[root@tp ~]# iptables -X -t nat</span><br><span class="line">[root@tp ~]# iptables -Z -t nat</span><br><span class="line"></span><br><span class="line">1. 添加规则</span><br><span class="line">添加基本的NAT地址转换，添加规则时，我们只添加DROP链，因为默认链全是ACCEPT。</span><br><span class="line"></span><br><span class="line">防止外网用内网IP欺骗</span><br><span class="line">[root@tp sysconfig]# iptables -t nat -A PREROUTING -i eth0 -s 10.0.0.0/8 -j DROP</span><br><span class="line">[root@tp sysconfig]# iptables -t nat -A PREROUTING -i eth0 -s 172.16.0.0/12 -j DROP</span><br><span class="line">[root@tp sysconfig]# iptables -t nat -A PREROUTING -i eth0 -s 192.168.0.0/16 -j DROP</span><br><span class="line"></span><br><span class="line">禁止与211.101.46.253的所有连接</span><br><span class="line">[root@tp ~]# iptables -t nat -A PREROUTING -d 211.101.46.253 -j DROP</span><br><span class="line"></span><br><span class="line">禁用FTP(21)端口</span><br><span class="line">[root@tp ~]# iptables -t nat -A PREROUTING -p tcp --dport 21 -j DROP</span><br><span class="line"></span><br><span class="line">只禁用211.101.46.253地址的FTP连接,其他连接可以进行。</span><br><span class="line">[root@tp ~]# iptables -t nat -A PREROUTING -p tcp --dport 21 -d 211.101.46.253 -j DROP</span><br><span class="line">​```</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> categories </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
